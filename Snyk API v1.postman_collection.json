{
	"info": {
		"_postman_id": "cff51e82-4184-445d-9c0d-feb9ed1db99e",
		"name": "Snyk API v1",
		"description": "Snyk V1 API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "19316853"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "{userId}",
					"item": [
						{
							"name": "Get User Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "<string>",
											"description": "(Required) The users ID. The `API_KEY` must have admin access to at least one group or organization where the requested user is a member and must have the `api` entitlement on their preferred organization."
										}
									]
								},
								"description": "Retrieves information about a user."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":userId"
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\"\n}"
								},
								{
									"name": "The provided `id` is not in a valid format.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":userId"
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "`API_KEY` is invalid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":userId"
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "The requested user could not be found or caller does not have sufficient permissions.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":userId"
											],
											"variable": [
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				},
				{
					"name": "me",
					"item": [
						{
							"name": "notification-settings",
							"item": [
								{
									"name": "org",
									"item": [
										{
											"name": "{orgId}",
											"item": [
												{
													"name": "project",
													"item": [
														{
															"name": "{projectId}",
															"item": [
																{
																	"name": "Get project notification settings",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId/project/:projectId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"user",
																				"me",
																				"notification-settings",
																				"org",
																				":orgId",
																				"project",
																				":projectId"
																			],
																			"variable": [
																				{
																					"key": "orgId",
																					"value": "<string>",
																					"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																				},
																				{
																					"key": "projectId",
																					"value": "<string>",
																					"description": "(Required) The project ID to return notification settings for."
																				}
																			]
																		},
																		"description": "The project notification settings for the user that will determine which emails are sent."
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json; charset=utf-8"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId/project/:projectId",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"user",
																						"me",
																						"notification-settings",
																						"org",
																						":orgId",
																						"project",
																						":projectId"
																					],
																					"variable": [
																						{
																							"key": "orgId"
																						},
																						{
																							"key": "projectId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json; charset=utf-8"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"all\",\n    \"issueType\": \"none\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  }\n}"
																		}
																	]
																},
																{
																	"name": "Modify project notification settings",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"all\",\n    \"issueType\": \"all\"\n  }\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId/project/:projectId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"user",
																				"me",
																				"notification-settings",
																				"org",
																				":orgId",
																				"project",
																				":projectId"
																			],
																			"variable": [
																				{
																					"key": "orgId",
																					"value": "<string>",
																					"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																				},
																				{
																					"key": "projectId",
																					"value": "<string>",
																					"description": "(Required) The project ID to return notification settings for."
																				}
																			]
																		},
																		"description": "The project notification settings for the user that will determine which emails are sent."
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json; charset=utf-8"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"all\",\n    \"issueType\": \"all\"\n  }\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId/project/:projectId",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"user",
																						"me",
																						"notification-settings",
																						"org",
																						":orgId",
																						"project",
																						":projectId"
																					],
																					"variable": [
																						{
																							"key": "orgId"
																						},
																						{
																							"key": "projectId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "text",
																			"header": [],
																			"cookie": [],
																			"body": ""
																		}
																	]
																}
															]
														}
													]
												},
												{
													"name": "Get organization notification settings",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"user",
																"me",
																"notification-settings",
																"org",
																":orgId"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																}
															]
														},
														"description": "The organization notification settings for the user that will determine which emails are sent."
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"user",
																		"me",
																		"notification-settings",
																		"org",
																		":orgId"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"all\",\n    \"issueType\": \"none\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  }\n}"
														}
													]
												},
												{
													"name": "Modify organization notification settings",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; charset=utf-8"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"high\",\n    \"issueType\": \"vuln\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"user",
																"me",
																"notification-settings",
																"org",
																":orgId"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																}
															]
														},
														"description": "The organization notification settings for the user that will determine which emails are sent."
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json; charset=utf-8"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"high\",\n    \"issueType\": \"vuln\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\"\n  }\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/user/me/notification-settings/org/:orgId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"user",
																		"me",
																		"notification-settings",
																		"org",
																		":orgId"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"all\",\n    \"issueType\": \"none\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  }\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Get My Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": "{{baseUrl}}/user/me",
								"description": "Retrieves information about the the user making the request."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": "{{baseUrl}}/user/me"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"orgs\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
								},
								{
									"name": "`API_KEY` is invalid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": "{{baseUrl}}/user/me"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "group",
			"item": [
				{
					"name": "{groupId}",
					"item": [
						{
							"name": "settings",
							"item": [
								{
									"name": "View group settings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/group/:groupId/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"group",
												":groupId",
												"settings"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "<string>",
													"description": "(Required) The group ID. The `API_KEY` must have admin access to this group."
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/group/:groupId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"group",
														":groupId",
														"settings"
													],
													"variable": [
														{
															"key": "groupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"requestAccess\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"sessionLength\": \"<number>\"\n}"
										}
									]
								},
								{
									"name": "Update group settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"requestAccess\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"sessionLength\": \"<number>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/group/:groupId/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"group",
												":groupId",
												"settings"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "<string>",
													"description": "(Required) The group ID. The `API_KEY` must have admin access to this group."
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"requestAccess\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"sessionLength\": \"<number>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/group/:groupId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"group",
														":groupId",
														"settings"
													],
													"variable": [
														{
															"key": "groupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"requestAccess\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"sessionLength\": \"<number>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "members",
							"item": [
								{
									"name": "List all members in a group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/group/:groupId/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"group",
												":groupId",
												"members"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "<string>",
													"description": "(Required) The group ID. The `API_KEY` must have access admin to this group."
												}
											]
										},
										"description": "> **Note**: Requests to this endpoint are limited to one per minute. Additional requests within this time will receive a `429 Too Many Requests` response."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/group/:groupId/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"group",
														":groupId",
														"members"
													],
													"variable": [
														{
															"key": "groupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"orgs\": [\n      {\n        \"name\": \"<string>\",\n        \"role\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"role\": \"<string>\"\n      }\n    ],\n    \"groupRole\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"orgs\": [\n      {\n        \"name\": \"<string>\",\n        \"role\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"role\": \"<string>\"\n      }\n    ],\n    \"groupRole\": \"<string>\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "org",
							"item": [
								{
									"name": "{orgId}",
									"item": [
										{
											"name": "members",
											"item": [
												{
													"name": "Add a member to an organization within a group",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"userId\": \"<string>\",\n  \"role\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/group/:groupId/org/:orgId/members",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"group",
																":groupId",
																"org",
																":orgId",
																"members"
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "<string>",
																	"description": "(Required) The group ID. The `API_KEY` must have access admin to this group."
																},
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID we want to add the member to. The `API_KEY` must have access to this organization."
																}
															]
														}
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"userId\": \"<string>\",\n  \"role\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/group/:groupId/org/:orgId/members",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"group",
																		":groupId",
																		"org",
																		":orgId",
																		"members"
																	],
																	"variable": [
																		{
																			"key": "groupId"
																		},
																		{
																			"key": "orgId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "tags",
							"item": [
								{
									"name": "delete",
									"item": [
										{
											"name": "Delete tag from group",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"force\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/group/:groupId/tags/delete",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"group",
														":groupId",
														"tags",
														"delete"
													],
													"variable": [
														{
															"key": "groupId",
															"value": "<string>",
															"description": "(Required) The group ID. The `API_KEY` must have access admin to this group."
														}
													]
												}
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"force\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/group/:groupId/tags/delete",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"group",
																":groupId",
																"tags",
																"delete"
															],
															"variable": [
																{
																	"key": "groupId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"force\": \"<boolean>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "List all tags in a group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/group/:groupId/tags?perPage=<double>&page=<double>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"group",
												":groupId",
												"tags"
											],
											"query": [
												{
													"key": "perPage",
													"value": "<double>",
													"description": "The number of results to return (the default is 1000)."
												},
												{
													"key": "page",
													"value": "<double>",
													"description": "The offset from which to start returning results from."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "<string>",
													"description": "(Required) The group ID. The `API_KEY` must have access admin to this group."
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/group/:groupId/tags?perPage=<double>&page=<double>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"group",
														":groupId",
														"tags"
													],
													"query": [
														{
															"key": "perPage",
															"value": "<double>",
															"description": "The number of results to return (the default is 1000)."
														},
														{
															"key": "page",
															"value": "<double>",
															"description": "The offset from which to start returning results from."
														}
													],
													"variable": [
														{
															"key": "groupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Link",
													"value": "",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n  \"tags\": [\n    {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n    },\n    {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "orgs",
							"item": [
								{
									"name": "List all organizations in a group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/group/:groupId/orgs?perPage=<double>&page=<double>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"group",
												":groupId",
												"orgs"
											],
											"query": [
												{
													"key": "perPage",
													"value": "<double>",
													"description": "The number of results to return (maximum is 100)."
												},
												{
													"key": "page",
													"value": "<double>",
													"description": "For pagination - offset (from which to start returning results)."
												},
												{
													"key": "name",
													"value": "<string>",
													"description": "Only organizations that have a name that **starts with** this value (case insensitive) will be returned."
												}
											],
											"variable": [
												{
													"key": "groupId",
													"value": "<string>",
													"description": "(Required) The group ID. The `API_KEY` must have READ access to this group and LIST organizations access in this group."
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/group/:groupId/orgs?perPage=<double>&page=<double>&name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"group",
														":groupId",
														"orgs"
													],
													"query": [
														{
															"key": "perPage",
															"value": "<double>",
															"description": "The number of results to return (maximum is 100)."
														},
														{
															"key": "page",
															"value": "<double>",
															"description": "For pagination - offset (from which to start returning results)."
														},
														{
															"key": "name",
															"value": "<string>",
															"description": "Only organizations that have a name that **starts with** this value (case insensitive) will be returned."
														}
													],
													"variable": [
														{
															"key": "groupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"url\": \"<string>\",\n  \"created\": \"<string>\",\n  \"orgs\": [\n    {\n      \"name\": \"<string>\",\n      \"id\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"url\": \"<string>\",\n      \"created\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"id\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"url\": \"<string>\",\n      \"created\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "roles",
							"item": [
								{
									"name": "List all roles in a group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/group/:groupId/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"group",
												":groupId",
												"roles"
											],
											"variable": [
												{
													"key": "groupId",
													"value": "<string>",
													"description": "(Required) The group ID. The `API_KEY` must have READ access to this group."
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/group/:groupId/roles",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"group",
														":groupId",
														"roles"
													],
													"variable": [
														{
															"key": "groupId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"publicId\": \"<string>\",\n    \"created\": \"<string>\",\n    \"modified\": \"<string>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"publicId\": \"<string>\",\n    \"created\": \"<string>\",\n    \"modified\": \"<string>\"\n  }\n]"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "orgs",
			"item": [
				{
					"name": "List all the organizations a user belongs to",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": "{{baseUrl}}/orgs",
						"description": "Each request to Snyk has to be done in the context of a Snyk organization. If no organization is specified, the user's default organization (user is identified according to the `API_KEY`) will be used.\nThe organization determines the access rights, licenses policy and is the unit of billing for private projects.\n\nAn organization should be given as a query parameter named `org`, with the public identifier given to this org. The list of organizations and their corresponding public ids can be found with the organization resource\n#### Required permissions\n\n- `View Organization`"
					},
					"response": [
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": "{{baseUrl}}/orgs"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"orgs\": [\n    {\n      \"name\": \"<string>\",\n      \"id\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"url\": \"<string>\",\n      \"group\": {\n        \"nullable\": true\n      }\n    },\n    {\n      \"name\": \"<string>\",\n      \"id\": \"<string>\",\n      \"slug\": \"<string>\",\n      \"url\": \"<string>\",\n      \"group\": {\n        \"nullable\": true\n      }\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "org",
			"item": [
				{
					"name": "{orgId}",
					"item": [
						{
							"name": "notification-settings",
							"item": [
								{
									"name": "Get organization notification settings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/notification-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"notification-settings"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "Manage the default settings for organization notifications. These will be used as defaults, but can be re-defined by organization members\n#### Required permissions\n\n- `View Organization`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/notification-settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"notification-settings"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"all\",\n    \"issueType\": \"none\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Set notification settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"high\",\n    \"issueType\": \"vuln\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/notification-settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"notification-settings"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "Manage the default settings for organization notifications. These will be used as defaults, but can be re-defined by organization members\n#### Required permissions\n\n- `View Organization`\n\n- `Edit Organization`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"high\",\n    \"issueType\": \"vuln\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/notification-settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"notification-settings"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"new-issues-remediations\": {\n    \"enabled\": \"<boolean>\",\n    \"issueSeverity\": \"all\",\n    \"issueType\": \"none\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"project-imported\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"test-limit\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  },\n  \"weekly-report\": {\n    \"enabled\": \"<boolean>\",\n    \"inherited\": \"<boolean>\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "invite",
							"item": [
								{
									"name": "Invite users",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"isAdmin\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/invite",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"invite"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
												}
											]
										},
										"description": "Invite users to the organization by email\n#### Required permissions\n\n- `View Organization`\n\n- `View Users`\n\n- `Invite Users`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"isAdmin\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/invite",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"invite"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "members",
							"item": [
								{
									"name": "{userId}",
									"item": [
										{
											"name": "Update a member in the organization",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"role\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/members/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"members",
														":userId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "(Required) The user ID."
														}
													]
												},
												"description": "Manage member's roles in your organization\n#### Required permissions\n\n- `Manage Users`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"role\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/members/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"members",
																":userId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Remove a member from the organization",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/members/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"members",
														":userId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID. The `API_KEY` must admin have access to this organization."
														},
														{
															"key": "userId",
															"value": "<string>",
															"description": "(Required) The user ID we want to remove."
														}
													]
												},
												"description": "Manage member's roles in your organization\n#### Required permissions\n\n- `View Organization`\n\n- `View Users`\n\n- `User Remove`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/members/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"members",
																":userId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "userId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "update",
									"item": [
										{
											"name": "{userId}",
											"item": [
												{
													"name": "Update a member's role in the organization",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"rolePublicId\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/members/update/:userId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"members",
																"update",
																":userId"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
																},
																{
																	"key": "userId",
																	"value": "<string>",
																	"description": "(Required) The user ID."
																}
															]
														},
														"description": "Update member's role in your organization by role publicId\n#### Required permissions\n\n- `Manage Users`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"rolePublicId\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/members/update/:userId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"members",
																		"update",
																		":userId"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "userId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "List Members",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/members?includeGroupAdmins=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"members"
											],
											"query": [
												{
													"key": "includeGroupAdmins",
													"value": "<boolean>",
													"description": "Include group administrators who also have access to this organization."
												}
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID."
												}
											]
										},
										"description": "Manage members in your organization\n#### Required permissions\n\n- `View Organization`\n\n- `View Users`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/members?includeGroupAdmins=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"members"
													],
													"query": [
														{
															"key": "includeGroupAdmins",
															"value": "<boolean>",
															"description": "Include group administrators who also have access to this organization."
														}
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"role\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"username\": \"<string>\",\n    \"email\": \"<string>\",\n    \"role\": \"<string>\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "settings",
							"item": [
								{
									"name": "View organization settings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"settings"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "#### Required permissions\n\n- `View Organization`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"settings"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"requestAccess\": {\n    \"enabled\": \"<boolean>\",\n    \"autoApproveIgnores\": \"<boolean>\",\n    \"reasonRequired\": \"<boolean>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Update organization settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<string>",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"settings"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
												}
											]
										},
										"description": "Settings that are not provided will not be modified.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Edit Organization`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<string>",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"settings"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"requestAccess\": {\n    \"enabled\": \"<boolean>\",\n    \"autoApproveIgnores\": \"<boolean>\",\n    \"reasonRequired\": \"<boolean>\"\n  }\n}"
										},
										{
											"name": "If provided a setting that the `API_KEY` has no edit permission for.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<string>",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"settings"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "provision",
							"item": [
								{
									"name": "Provision a user to the organization",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<string>\",\n  \"rolePublicId\": \"<string>\",\n  \"role\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/provision",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"provision"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID. The `API_KEY` must not exceed the permissions being granted to the provisioned user."
												}
											]
										},
										"description": "This endpoint allows Snyk Admins to provision user access to Snyk Orgs prior to the user login to the Snyk platform, and does not send out invitation emails to the Snyk platform. When the provisioned user logs into Snyk for the first time, the user will automatically be granted the appropriate Snyk org access and role permissions specified in the API call. This endpoint can be called multiple times to provision a user to multiple Snyk orgs. The API token used requires Org Admin permisisons, and must be part of a Snyk group with a valid SSO connection.  Service accounts are restricted from invoking this API. As this endpoint can only be used to provision new users, if a user has already logged into Snyk, this endpoint will not work to provision user access\n#### Required permissions\n- `Provision User`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"rolePublicId\": \"<string>\",\n  \"role\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/provision",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"provision"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"email\": \"<string>\",\n  \"role\": \"<string>\",\n  \"rolePublicId\": \"<string>\",\n  \"created\": \"<string>\"\n}"
										},
										{
											"name": "Provided `API_KEY` has no user provision permission or does not have permissions in role being provisioned.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"rolePublicId\": \"<string>\",\n  \"role\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/provision",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"provision"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "List pending user provisions",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/provision",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"provision"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID."
												}
											]
										},
										"description": "This endpoint allows Snyk Admins to provision user access to Snyk Orgs prior to the user login to the Snyk platform, and does not send out invitation emails to the Snyk platform. When the provisioned user logs into Snyk for the first time, the user will automatically be granted the appropriate Snyk org access and role permissions specified in the API call. This endpoint can be called multiple times to provision a user to multiple Snyk orgs. The API token used requires Org Admin permisisons, and must be part of a Snyk group with a valid SSO connection.  Service accounts are restricted from invoking this API. As this endpoint can only be used to provision new users, if a user has already logged into Snyk, this endpoint will not work to provision user access\n#### Required permissions\n- `Provision User`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/provision",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"provision"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"email\": \"<string>\",\n    \"role\": \"<string>\",\n    \"rolePublicId\": \"<string>\",\n    \"created\": \"<string>\"\n  },\n  {\n    \"email\": \"<string>\",\n    \"role\": \"<string>\",\n    \"rolePublicId\": \"<string>\",\n    \"created\": \"<string>\"\n  }\n]"
										},
										{
											"name": "Provided `API_KEY` has no user provision permission or does not have permissions in role being provisioned.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/provision",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"provision"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Delete pending user provision",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/provision",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"provision"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID."
												}
											]
										},
										"description": "This endpoint allows Snyk Admins to provision user access to Snyk Orgs prior to the user login to the Snyk platform, and does not send out invitation emails to the Snyk platform. When the provisioned user logs into Snyk for the first time, the user will automatically be granted the appropriate Snyk org access and role permissions specified in the API call. This endpoint can be called multiple times to provision a user to multiple Snyk orgs. The API token used requires Org Admin permisisons, and must be part of a Snyk group with a valid SSO connection.  Service accounts are restricted from invoking this API. As this endpoint can only be used to provision new users, if a user has already logged into Snyk, this endpoint will not work to provision user access\n#### Required permissions\n- `Provision User`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/provision",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"provision"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"ok\": \"<boolean>\"\n}"
										},
										{
											"name": "Provided `API_KEY` has no user provision permission or does not have permissions in role being provisioned.",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/provision",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"provision"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "integrations",
							"item": [
								{
									"name": "{integrationId}",
									"item": [
										{
											"name": "authentication",
											"item": [
												{
													"name": "provision-token",
													"item": [
														{
															"name": "Provision new broker token",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/authentication/provision-token",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"authentication",
																		"provision-token"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The `API_KEY` must have access to this organization."
																		},
																		{
																			"key": "integrationId",
																			"value": "<string>",
																			"description": "(Required) "
																		}
																	]
																},
																"description": "Issue a new and unique provisional broker token for the brokered integration.\n\nUsed for zero down-time token rotation with the Snyk Broker. Once provisioned, the token can be used to initialize a new broker client before using the switch API to update the token in use by the integration.\n\nThe new provisional token will fail to be created if the integration, or any other integration in the same group, already has one provisioned.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`\n\n- `Edit Integrations`"
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/authentication/provision-token",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"integrations",
																				":integrationId",
																				"authentication",
																				"provision-token"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "integrationId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; charset=utf-8"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"id\": \"<string>\",\n  \"provisionalBrokerToken\": \"<string>\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "switch-token",
													"item": [
														{
															"name": "Switch between broker tokens",
															"request": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/authentication/switch-token",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"authentication",
																		"switch-token"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The `API_KEY` must have access to this organization."
																		},
																		{
																			"key": "integrationId",
																			"value": "<string>",
																			"description": "(Required) "
																		}
																	]
																},
																"description": "Switch the existing broker token with the provisioned token for this integration and any other in the same group.\nOnly perform this action when you have a Broker client running with the provisioned token.\nThis action will fail if there is no token provisioned for this integration or any integration in the same group.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`\n\n- `Edit Integrations`"
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/authentication/switch-token",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"integrations",
																				":integrationId",
																				"authentication",
																				"switch-token"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "integrationId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "Delete credentials",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/authentication",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"integrations",
																":integrationId",
																"authentication"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "integrationId",
																	"value": "<string>",
																	"description": "(Required) The integration ID."
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`\n\n- `Edit Integrations`\n\nRemoves any credentials set for this integration. If this is a brokered connection the operation will have no effect."
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/authentication",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"authentication"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "integrationId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "clone",
											"item": [
												{
													"name": "Clone an integration (with settings and credentials)",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"destinationOrgPublicId\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/clone",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"integrations",
																":integrationId",
																"clone"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) Source organization public ID to clone integration settings from. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "integrationId",
																	"value": "<string>",
																	"description": "(Required) Source integration public ID to clone."
																}
															]
														},
														"description": "Clone an integration, including all of its settings and credentials from one organization to another organization in the same group.\nThis API supports both brokered and non-brokered integrations.\n\nUse this API for when you want to share a Broker token between several Snyk organizations (integrations).\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`\n\n- `Edit Integrations`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"destinationOrgPublicId\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/clone",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"clone"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "integrationId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"newIntegrationId\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "settings",
											"item": [
												{
													"name": "Retrieve",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"integrations",
																":integrationId",
																"settings"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
																},
																{
																	"key": "integrationId",
																	"value": "<string>",
																	"description": "(Required) The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/settings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"settings"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "integrationId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": {\n    \"backlogPrsEnabled\": \"<boolean>\",\n    \"backlogPrStrategy\": \"vuln\",\n    \"freshPrsEnabled\": \"<boolean>\",\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"manualRemediationPrs\": {\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"dockerfileSCMEnabled\": \"<boolean>\"\n}"
														}
													]
												},
												{
													"name": "Update",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; charset=utf-8"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": {\n    \"backlogPrsEnabled\": \"<boolean>\",\n    \"backlogPrStrategy\": \"dependency\",\n    \"freshPrsEnabled\": \"<boolean>\",\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"manualRemediationPrs\": {\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"dockerfileSCMEnabled\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"integrations",
																":integrationId",
																"settings"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
																},
																{
																	"key": "integrationId",
																	"value": "<string>",
																	"description": "(Required) The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`\n\n- `Edit Integrations`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json; charset=utf-8"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": {\n    \"backlogPrsEnabled\": \"<boolean>\",\n    \"backlogPrStrategy\": \"dependency\",\n    \"freshPrsEnabled\": \"<boolean>\",\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"manualRemediationPrs\": {\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"dockerfileSCMEnabled\": \"<boolean>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/settings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"settings"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "integrationId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": {\n    \"backlogPrsEnabled\": \"<boolean>\",\n    \"backlogPrStrategy\": \"dependency\",\n    \"freshPrsEnabled\": \"<boolean>\",\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"manualRemediationPrs\": {\n    \"usePatchRemediation\": \"<boolean>\"\n  },\n  \"dockerfileSCMEnabled\": \"<boolean>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "import",
											"item": [
												{
													"name": "{jobId}",
													"item": [
														{
															"name": "Get import job details",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/import/:jobId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"import",
																		":jobId"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
																		},
																		{
																			"key": "integrationId",
																			"value": "<string>",
																			"description": "(Required) The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
																		},
																		{
																			"key": "jobId",
																			"value": "<string>",
																			"description": "(Required) The ID of the job. This can be found in the Location response header from the corresponding POST request that triggered the import job."
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/import/:jobId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"integrations",
																				":integrationId",
																				"import",
																				":jobId"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "integrationId"
																				},
																				{
																					"key": "jobId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; charset=utf-8"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"id\": \"<string>\",\n  \"status\": \"<string>\",\n  \"created\": \"<string>\",\n  \"logs\": [\n    {\n      \"name\": \"<string>\",\n      \"created\": \"<string>\",\n      \"status\": \"<string>\",\n      \"truncated\": \"<boolean>\",\n      \"projects\": [\n        {\n          \"targetFile\": \"<string>\",\n          \"success\": \"<boolean>\",\n          \"projectUrl\": \"<string>\",\n          \"projectId\": \"<string>\"\n        },\n        {\n          \"targetFile\": \"<string>\",\n          \"success\": \"<boolean>\",\n          \"projectUrl\": \"<string>\",\n          \"projectId\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"name\": \"<string>\",\n      \"created\": \"<string>\",\n      \"status\": \"<string>\",\n      \"truncated\": \"<boolean>\",\n      \"projects\": [\n        {\n          \"targetFile\": \"<string>\",\n          \"success\": \"<boolean>\",\n          \"projectUrl\": \"<string>\",\n          \"projectId\": \"<string>\"\n        },\n        {\n          \"targetFile\": \"<string>\",\n          \"success\": \"<boolean>\",\n          \"projectUrl\": \"<string>\",\n          \"projectId\": \"<string>\"\n        }\n      ]\n    }\n  ]\n}"
																}
															]
														}
													]
												},
												{
													"name": "Import targets",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"target\": {\n    \"owner\": \"<string>\",\n    \"name\": \"<string>\",\n    \"branch\": \"<string>\"\n  },\n  \"files\": [\n    {\n      \"path\": \"<string>\"\n    },\n    {\n      \"path\": \"<string>\"\n    }\n  ],\n  \"exclusionGlobs\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/import",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"integrations",
																":integrationId",
																"import"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
																},
																{
																	"key": "integrationId",
																	"value": "<string>",
																	"description": "(Required) The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
																}
															]
														},
														"description": "Request a [target](https://docs.snyk.io/getting-started/introduction-to-snyk-projects#targets) to be analyzed for supported Snyk projects via a configured [integration](https://docs.snyk.io/integrations). See the [Integrations API](https://snyk.docs.apiary.io/#reference/integrations) to configure a new integration."
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"target\": {\n    \"owner\": \"<string>\",\n    \"name\": \"<string>\",\n    \"branch\": \"<string>\"\n  },\n  \"files\": [\n    {\n      \"path\": \"<string>\"\n    },\n    {\n      \"path\": \"<string>\"\n    }\n  ],\n  \"exclusionGlobs\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId/import",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"integrations",
																		":integrationId",
																		"import"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "integrationId"
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Location",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Update existing integration",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"type\": \"harbor-cr\",\n  \"broker\": {\n    \"enabled\": \"<boolean>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"integrations",
														":integrationId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
														},
														{
															"key": "integrationId",
															"value": "<string>",
															"description": "(Required) The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
														}
													]
												},
												"description": "+ Update integration's credentials for given organization. Integration must be **not brokered**\n\n+ Enable or disable brokered integration for given organization. *Credentials required for disabling brokered integration*\n\nExamples:\n\n- [Set up a broker for an existing integration](https://docs.snyk.io/snyk-api/api-endpoints-index-and-tips/examples-for-the-update-existing-integration-endpoint#set-up-broker-for-an-existing-integration)\n\n- [Update credentials for an existing non-brokered integration](https://docs.snyk.io/snyk-api/api-endpoints-index-and-tips/examples-for-the-update-existing-integration-endpoint#update-credentials-for-an-existing-non-brokered-integration)\n\n- [Disable broker for an existing integration](https://docs.snyk.io/snyk-api/api-endpoints-index-and-tips/examples-for-the-update-existing-integration-endpoint#disable-broker-for-an-existing-integration)\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`\n\n- `Edit Integrations`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json; charset=utf-8"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"type\": \"harbor-cr\",\n  \"broker\": {\n    \"enabled\": \"<boolean>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/integrations/:integrationId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"integrations",
																":integrationId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "integrationId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<string>\",\n  \"brokerToken\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "{type}",
									"item": [
										{
											"name": "Get existing integration by type",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/integrations/:type",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"integrations",
														":type"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The `API_KEY` must have admin access to this organization."
														},
														{
															"key": "type",
															"value": "google-artifact-cr",
															"description": "(Required) Integration type."
														}
													]
												},
												"description": "#### Required permissions\n- `View Organization` - `View Integrations`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/integrations/:type",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"integrations",
																":type"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "type"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<string>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "List",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/integrations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"integrations"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization public ID. The `API_KEY` must have admin access to this organization."
												}
											]
										},
										"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/integrations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"integrations"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Add new integration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"gcr\",\n  \"credentials\": {\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"registryBase\": \"<string>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/integrations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"integrations"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID. The `API_KEY` must have admin access to this organization."
												}
											]
										},
										"description": "Add new integration for given organization.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Integrations`\n\n- `Edit Integrations`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"type\": \"gcr\",\n  \"credentials\": {\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"registryBase\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/integrations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"integrations"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "project",
							"item": [
								{
									"name": "{projectId}",
									"item": [
										{
											"name": "deactivate",
											"item": [
												{
													"name": "Deactivate",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/deactivate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"deactivate"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID."
																}
															]
														},
														"description": "Deactivating a project will:\n\n- Disable pull request tests for new vulnerabilities.\n\n- Disable Fix pull request from being opened for newly disclosed vulnerabilities.\n\n- Disable recurring tests - email alerts about newly disclosed vulnerabilities will be turned off.\n\n- If the repository has no other active projects, then remove any webhooks related to the project.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Project Status`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/deactivate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"deactivate"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "activate",
											"item": [
												{
													"name": "Activate",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/activate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"activate"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID."
																}
															]
														},
														"description": "Activating a project will:\n\n- Add a repository webhook for supported integrations.\n\n- Enable pull request tests for new vulnerabilities.\n\n- Open Fix pull request for newly disclosed vulnerabilities.\n\n- Enable recurring tests, sending email alerts about newly disclosed vulnerabilities.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Project Status`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/activate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"activate"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "aggregated-issues",
											"item": [
												{
													"name": "List all Aggregated issues",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"includeDescription\": \"<boolean>\",\n  \"includeIntroducedThrough\": \"<boolean>\",\n  \"filters\": {\n    \"severities\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"priority\": {\n      \"score\": {\n        \"min\": \"<number>\",\n        \"max\": \"<number>\"\n      }\n    }\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/aggregated-issues",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"aggregated-issues"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID to return issues for."
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Project`\n\n- `View Project Snapshot`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"includeDescription\": \"<boolean>\",\n  \"includeIntroducedThrough\": \"<boolean>\",\n  \"filters\": {\n    \"severities\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"priority\": {\n      \"score\": {\n        \"min\": \"<number>\",\n        \"max\": \"<number>\"\n      }\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/aggregated-issues",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"aggregated-issues"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"issues\": [\n    {\n      \"id\": \"<string>\",\n      \"issueType\": \"<string>\",\n      \"pkgName\": \"<string>\",\n      \"pkgVersions\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"issueData\": {\n        \"id\": \"<string>\",\n        \"title\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"originalSeverity\": \"<string>\",\n        \"url\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"path\": \"<string>\",\n        \"violatedPolicyPublicId\": \"<string>\",\n        \"description\": \"<string>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"OSVDB\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"unaffected\": \"<string>\"\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"severities\": [\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"exploitDetails\": {\n          \"target\": {\n            \"sources\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"maturityLevels\": [\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              },\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              }\n            ]\n          }\n        },\n        \"language\": \"<string>\",\n        \"patches\": [\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"nearestFixedInVersion\": \"<string>\",\n        \"isMaliciousPackage\": \"<boolean>\"\n      },\n      \"isPatched\": \"<boolean>\",\n      \"isIgnored\": \"<boolean>\",\n      \"introducedThrough\": [\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        },\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        }\n      ],\n      \"ignoreReasons\": [\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"api\"\n        },\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"cli\"\n        }\n      ],\n      \"fixInfo\": {\n        \"isUpgradable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isFixable\": \"<boolean>\",\n        \"isPartiallyFixable\": \"<boolean>\",\n        \"nearestFixedInVersion\": \"<string>\",\n        \"fixedIn\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"priority\": {\n        \"score\": \"<number>\"\n      },\n      \"links\": {\n        \"paths\": \"<string>\"\n      }\n    },\n    {\n      \"id\": \"<string>\",\n      \"issueType\": \"<string>\",\n      \"pkgName\": \"<string>\",\n      \"pkgVersions\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"issueData\": {\n        \"id\": \"<string>\",\n        \"title\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"originalSeverity\": \"<string>\",\n        \"url\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"path\": \"<string>\",\n        \"violatedPolicyPublicId\": \"<string>\",\n        \"description\": \"<string>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"OSVDB\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"unaffected\": \"<string>\"\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"severities\": [\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"exploitDetails\": {\n          \"target\": {\n            \"sources\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"maturityLevels\": [\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              },\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              }\n            ]\n          }\n        },\n        \"language\": \"<string>\",\n        \"patches\": [\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"nearestFixedInVersion\": \"<string>\",\n        \"isMaliciousPackage\": \"<boolean>\"\n      },\n      \"isPatched\": \"<boolean>\",\n      \"isIgnored\": \"<boolean>\",\n      \"introducedThrough\": [\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        },\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        }\n      ],\n      \"ignoreReasons\": [\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"cli\"\n        },\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"api\"\n        }\n      ],\n      \"fixInfo\": {\n        \"isUpgradable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isFixable\": \"<boolean>\",\n        \"isPartiallyFixable\": \"<boolean>\",\n        \"nearestFixedInVersion\": \"<string>\",\n        \"fixedIn\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"priority\": {\n        \"score\": \"<number>\"\n      },\n      \"links\": {\n        \"paths\": \"<string>\"\n      }\n    }\n  ]\n}"
														}
													]
												}
											]
										},
										{
											"name": "issue",
											"item": [
												{
													"name": "{issueId}",
													"item": [
														{
															"name": "paths",
															"item": [
																{
																	"name": "List all project issue paths",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/issue/:issueId/paths?snapshotId=<string>&perPage=<double>&page=<double>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"issue",
																				":issueId",
																				"paths"
																			],
																			"query": [
																				{
																					"key": "snapshotId",
																					"value": "<string>",
																					"description": "The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this."
																				},
																				{
																					"key": "perPage",
																					"value": "<double>",
																					"description": "The number of results to return per page (1 - 1000, inclusive)."
																				},
																				{
																					"key": "page",
																					"value": "<double>",
																					"description": "The page of results to return."
																				}
																			],
																			"variable": [
																				{
																					"key": "orgId",
																					"value": "<string>",
																					"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																				},
																				{
																					"key": "projectId",
																					"value": "<string>",
																					"description": "(Required) The project ID for which to return issue paths."
																				},
																				{
																					"key": "issueId",
																					"value": "<string>",
																					"description": "(Required) The issue ID for which to return issue paths."
																				}
																			]
																		},
																		"description": "#### Required permissions\n\n- `View Project`\n\n- `View Project Snapshot`"
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json; charset=utf-8"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/org/:orgId/project/:projectId/issue/:issueId/paths?snapshotId=<string>&perPage=<double>&page=<double>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"org",
																						":orgId",
																						"project",
																						":projectId",
																						"issue",
																						":issueId",
																						"paths"
																					],
																					"query": [
																						{
																							"key": "snapshotId",
																							"value": "<string>",
																							"description": "The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this."
																						},
																						{
																							"key": "perPage",
																							"value": "<double>",
																							"description": "The number of results to return per page (1 - 1000, inclusive)."
																						},
																						{
																							"key": "page",
																							"value": "<double>",
																							"description": "The page of results to return."
																						}
																					],
																					"variable": [
																						{
																							"key": "orgId"
																						},
																						{
																							"key": "projectId"
																						},
																						{
																							"key": "issueId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json; charset=utf-8"
																				},
																				{
																					"key": "Link",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"snapshotId\": \"<string>\",\n  \"paths\": [\n    [],\n    []\n  ],\n  \"total\": \"<number>\",\n  \"links\": {\n    \"prev\": \"<string>\",\n    \"next\": \"<string>\",\n    \"last\": \"<string>\"\n  }\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "jira-issue",
															"item": [
																{
																	"name": "Create jira issue",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"fields\": {\n    \"project\": {},\n    \"issuetype\": {},\n    \"summary\": \"<string>\"\n  }\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/issue/:issueId/jira-issue",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"issue",
																				":issueId",
																				"jira-issue"
																			],
																			"variable": [
																				{
																					"key": "orgId",
																					"value": "<string>",
																					"description": "(Required) The organization ID to list Jira issues for. The `API_KEY` must have access to this organization."
																				},
																				{
																					"key": "projectId",
																					"value": "<string>",
																					"description": "(Required) The project ID to list Jira issues for."
																				},
																				{
																					"key": "issueId",
																					"value": "<string>",
																					"description": "(Required) The issue ID to create Jira issue for."
																				}
																			]
																		},
																		"description": "If you have configured an integration with Jira, it is possible to create Jira issues for project vulnerabilities or license issues directly from the Snyk API.\n\nThe Jira integration is available to customers on the pro or enterprise plan.\n\nAt the moment, the usage of the Jira integration via the API is not supported for Snyk Infrastructure as Code\n#### Required permissions\n\n- `Create Jira issues`"
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json; charset=utf-8"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"fields\": {\n    \"project\": {},\n    \"issuetype\": {},\n    \"summary\": \"<string>\"\n  }\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/org/:orgId/project/:projectId/issue/:issueId/jira-issue",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"org",
																						":orgId",
																						"project",
																						":projectId",
																						"issue",
																						":issueId",
																						"jira-issue"
																					],
																					"variable": [
																						{
																							"key": "orgId"
																						},
																						{
																							"key": "projectId"
																						},
																						{
																							"key": "issueId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json; charset=utf-8"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"jiraIssue\": {\n    \"id\": \"<string>\",\n    \"key\": \"<string>\"\n  }\n}"
																		}
																	]
																}
															]
														}
													]
												}
											]
										},
										{
											"name": "history",
											"item": [
												{
													"name": "{snapshotId}",
													"item": [
														{
															"name": "aggregated-issues",
															"item": [
																{
																	"name": "List all project snapshot aggregated issues",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"includeDescription\": \"<boolean>\",\n  \"includeIntroducedThrough\": \"<boolean>\",\n  \"filters\": {\n    \"severities\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"priority\": {\n      \"score\": {\n        \"min\": \"<number>\",\n        \"max\": \"<number>\"\n      }\n    }\n  }\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/history/:snapshotId/aggregated-issues",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"history",
																				":snapshotId",
																				"aggregated-issues"
																			],
																			"variable": [
																				{
																					"key": "orgId",
																					"value": "<string>",
																					"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																				},
																				{
																					"key": "projectId",
																					"value": "<string>",
																					"description": "(Required) The project ID."
																				},
																				{
																					"key": "snapshotId",
																					"value": "<string>",
																					"description": "(Required) The snapshot ID. If set to latest, the most recent snapshot will be used."
																				}
																			]
																		},
																		"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`"
																	},
																	"response": [
																		{
																			"name": "Untitled Response",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json; charset=utf-8"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"includeDescription\": \"<boolean>\",\n  \"includeIntroducedThrough\": \"<boolean>\",\n  \"filters\": {\n    \"severities\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"priority\": {\n      \"score\": {\n        \"min\": \"<number>\",\n        \"max\": \"<number>\"\n      }\n    }\n  }\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/org/:orgId/project/:projectId/history/:snapshotId/aggregated-issues",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"org",
																						":orgId",
																						"project",
																						":projectId",
																						"history",
																						":snapshotId",
																						"aggregated-issues"
																					],
																					"variable": [
																						{
																							"key": "orgId"
																						},
																						{
																							"key": "projectId"
																						},
																						{
																							"key": "snapshotId"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json; charset=utf-8"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"issues\": [\n    {\n      \"id\": \"<string>\",\n      \"issueType\": \"<string>\",\n      \"pkgName\": \"<string>\",\n      \"pkgVersions\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"issueData\": {\n        \"id\": \"<string>\",\n        \"title\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"originalSeverity\": \"<string>\",\n        \"url\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"path\": \"<string>\",\n        \"violatedPolicyPublicId\": \"<string>\",\n        \"description\": \"<string>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"OSVDB\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"unaffected\": \"<string>\"\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"severities\": [\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"exploitDetails\": {\n          \"target\": {\n            \"sources\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"maturityLevels\": [\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              },\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              }\n            ]\n          }\n        },\n        \"language\": \"<string>\",\n        \"patches\": [\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"nearestFixedInVersion\": \"<string>\",\n        \"isMaliciousPackage\": \"<boolean>\"\n      },\n      \"isPatched\": \"<boolean>\",\n      \"isIgnored\": \"<boolean>\",\n      \"introducedThrough\": [\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        },\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        }\n      ],\n      \"ignoreReasons\": [\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"api\"\n        },\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"cli\"\n        }\n      ],\n      \"fixInfo\": {\n        \"isUpgradable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isFixable\": \"<boolean>\",\n        \"isPartiallyFixable\": \"<boolean>\",\n        \"nearestFixedInVersion\": \"<string>\",\n        \"fixedIn\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"priority\": {\n        \"score\": \"<number>\"\n      },\n      \"links\": {\n        \"paths\": \"<string>\"\n      }\n    },\n    {\n      \"id\": \"<string>\",\n      \"issueType\": \"<string>\",\n      \"pkgName\": \"<string>\",\n      \"pkgVersions\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"issueData\": {\n        \"id\": \"<string>\",\n        \"title\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"originalSeverity\": \"<string>\",\n        \"url\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"path\": \"<string>\",\n        \"violatedPolicyPublicId\": \"<string>\",\n        \"description\": \"<string>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"OSVDB\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"unaffected\": \"<string>\"\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"severities\": [\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"assigner\": \"<string>\",\n            \"severity\": \"<string>\",\n            \"baseScore\": \"<number>\",\n            \"vector\": \"<string>\",\n            \"cvssVersion\": \"<string>\",\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"exploitDetails\": {\n          \"target\": {\n            \"sources\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"maturityLevels\": [\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              },\n              {\n                \"format\": \"<string>\",\n                \"level\": \"<string>\"\n              }\n            ]\n          }\n        },\n        \"language\": \"<string>\",\n        \"patches\": [\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          },\n          {\n            \"id\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\",\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"modificationTime\": \"<string>\"\n          }\n        ],\n        \"nearestFixedInVersion\": \"<string>\",\n        \"isMaliciousPackage\": \"<boolean>\"\n      },\n      \"isPatched\": \"<boolean>\",\n      \"isIgnored\": \"<boolean>\",\n      \"introducedThrough\": [\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        },\n        {\n          \"kind\": \"<string>\",\n          \"data\": {}\n        }\n      ],\n      \"ignoreReasons\": [\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"cli\"\n        },\n        {\n          \"reason\": \"<string>\",\n          \"expires\": \"<string>\",\n          \"source\": \"api\"\n        }\n      ],\n      \"fixInfo\": {\n        \"isUpgradable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isFixable\": \"<boolean>\",\n        \"isPartiallyFixable\": \"<boolean>\",\n        \"nearestFixedInVersion\": \"<string>\",\n        \"fixedIn\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"priority\": {\n        \"score\": \"<number>\"\n      },\n      \"links\": {\n        \"paths\": \"<string>\"\n      }\n    }\n  ]\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "issue",
															"item": [
																{
																	"name": "{issueId}",
																	"item": [
																		{
																			"name": "paths",
																			"item": [
																				{
																					"name": "List all project snapshot issue paths",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json; charset=utf-8"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/org/:orgId/project/:projectId/history/:snapshotId/issue/:issueId/paths?perPage=<double>&page=<double>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"org",
																								":orgId",
																								"project",
																								":projectId",
																								"history",
																								":snapshotId",
																								"issue",
																								":issueId",
																								"paths"
																							],
																							"query": [
																								{
																									"key": "perPage",
																									"value": "<double>",
																									"description": "The number of results to return per page (1 - 1000, inclusive)."
																								},
																								{
																									"key": "page",
																									"value": "<double>",
																									"description": "The page of results to return."
																								}
																							],
																							"variable": [
																								{
																									"key": "orgId",
																									"value": "<string>",
																									"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																								},
																								{
																									"key": "projectId",
																									"value": "<string>",
																									"description": "(Required) The project ID for which to return issue paths."
																								},
																								{
																									"key": "snapshotId",
																									"value": "<string>",
																									"description": "(Required) The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this."
																								},
																								{
																									"key": "issueId",
																									"value": "<string>",
																									"description": "(Required) The issue ID for which to return issue paths."
																								}
																							]
																						},
																						"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`"
																					},
																					"response": [
																						{
																							"name": "Untitled Response",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json; charset=utf-8"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/org/:orgId/project/:projectId/history/:snapshotId/issue/:issueId/paths?perPage=<double>&page=<double>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"org",
																										":orgId",
																										"project",
																										":projectId",
																										"history",
																										":snapshotId",
																										"issue",
																										":issueId",
																										"paths"
																									],
																									"query": [
																										{
																											"key": "perPage",
																											"value": "<double>",
																											"description": "The number of results to return per page (1 - 1000, inclusive)."
																										},
																										{
																											"key": "page",
																											"value": "<double>",
																											"description": "The page of results to return."
																										}
																									],
																									"variable": [
																										{
																											"key": "orgId"
																										},
																										{
																											"key": "projectId"
																										},
																										{
																											"key": "snapshotId"
																										},
																										{
																											"key": "issueId"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json; charset=utf-8"
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"snapshotId\": \"<string>\",\n  \"paths\": [\n    [],\n    []\n  ],\n  \"total\": \"<number>\",\n  \"links\": {\n    \"prev\": \"<string>\",\n    \"next\": \"<string>\",\n    \"last\": \"<string>\"\n  }\n}"
																						}
																					]
																				}
																			]
																		}
																	]
																}
															]
														}
													]
												},
												{
													"name": "List all project snapshots",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"filters\": {\n    \"imageId\": \"<string>\"\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/history?perPage=<double>&page=<double>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"history"
															],
															"query": [
																{
																	"key": "perPage",
																	"value": "<double>",
																	"description": "The number of results to return (the default is 10, the maximum is 100)."
																},
																{
																	"key": "page",
																	"value": "<double>",
																	"description": "The offset from which to start returning results from."
																}
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID to return snapshots for."
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"filters\": {\n    \"imageId\": \"<string>\"\n  }\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/history?perPage=<double>&page=<double>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"history"
																	],
																	"query": [
																		{
																			"key": "perPage",
																			"value": "<double>",
																			"description": "The number of results to return (the default is 10, the maximum is 100)."
																		},
																		{
																			"key": "page",
																			"value": "<double>",
																			"description": "The offset from which to start returning results from."
																		}
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																},
																{
																	"key": "Link",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"snapshots\": [\n    {\n      \"id\": \"<string>\",\n      \"created\": \"<string>\",\n      \"totalDependencies\": \"<number>\",\n      \"issueCounts\": {\n        \"vuln\": {\n          \"low\": \"<number>\",\n          \"medium\": \"<number>\",\n          \"high\": \"<number>\",\n          \"critical\": \"<number>\"\n        },\n        \"license\": {\n          \"low\": \"<number>\",\n          \"medium\": \"<number>\",\n          \"high\": \"<number>\",\n          \"critical\": \"<number>\"\n        },\n        \"sast\": {\n          \"low\": \"<number>\",\n          \"medium\": \"<number>\",\n          \"high\": \"<number>\",\n          \"critical\": \"<number>\"\n        }\n      },\n      \"imageId\": \"<string>\",\n      \"imageTag\": \"<string>\",\n      \"imageBaseImage\": \"<string>\",\n      \"imagePlatform\": \"<string>\",\n      \"method\": \"cli\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"created\": \"<string>\",\n      \"totalDependencies\": \"<number>\",\n      \"issueCounts\": {\n        \"vuln\": {\n          \"low\": \"<number>\",\n          \"medium\": \"<number>\",\n          \"high\": \"<number>\",\n          \"critical\": \"<number>\"\n        },\n        \"license\": {\n          \"low\": \"<number>\",\n          \"medium\": \"<number>\",\n          \"high\": \"<number>\",\n          \"critical\": \"<number>\"\n        },\n        \"sast\": {\n          \"low\": \"<number>\",\n          \"medium\": \"<number>\",\n          \"high\": \"<number>\",\n          \"critical\": \"<number>\"\n        }\n      },\n      \"imageId\": \"<string>\",\n      \"imageTag\": \"<string>\",\n      \"imageBaseImage\": \"<string>\",\n      \"imagePlatform\": \"<string>\",\n      \"method\": \"cli\"\n    }\n  ],\n  \"total\": \"<number>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "dep-graph",
											"item": [
												{
													"name": "Get Project dependency graph",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/dep-graph",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"dep-graph"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID to return issues for."
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`"
													},
													"response": [
														{
															"name": "* A reference implementation of the graph, as well as conversion functions to/from legacy tree format, can be found at: https://github.com/snyk/dep-graph.\n\n* The object might contain additional fields in the future, in a backward-compatible way (`schemaVe",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/dep-graph",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"dep-graph"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"depGraph\": {\n    \"schemaVersion\": \"<string>\",\n    \"pkgManager\": {\n      \"name\": \"<string>\",\n      \"version\": \"<string>\",\n      \"repositories\": [\n        {\n          \"alias\": \"<string>\"\n        },\n        {\n          \"alias\": \"<string>\"\n        }\n      ]\n    },\n    \"pkgs\": [\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      }\n    ],\n    \"graph\": {\n      \"rootNodeId\": \"<string>\",\n      \"nodes\": [\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        },\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}"
														}
													]
												}
											]
										},
										{
											"name": "ignores",
											"item": [
												{
													"name": "List all ignores",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignores",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"ignores"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID to list ignores for. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID to list ignores for."
																}
															]
														},
														"description": "Ignores from `.snyk` files are not included here.\nIgnores from Policies are not included here.Temporary ignores include an `expires` attribute, while permanent ignores do not.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Ignores`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignores",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"ignores"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"issueId\": [\n    {\n      \"ignorePath\": {\n        \"reason\": \"<string>\",\n        \"reasonType\": \"not-vulnerable\",\n        \"ignoredBy\": {\n          \"name\": \"<string>\",\n          \"email\": \"<string>\",\n          \"id\": \"<string>\"\n        },\n        \"disregardIfFixable\": \"<boolean>\",\n        \"expires\": \"<string>\",\n        \"created\": \"<string>\"\n      }\n    },\n    {\n      \"ignorePath\": {\n        \"reason\": \"<string>\",\n        \"reasonType\": \"wont-fix\",\n        \"ignoredBy\": {\n          \"name\": \"<string>\",\n          \"email\": \"<string>\",\n          \"id\": \"<string>\"\n        },\n        \"disregardIfFixable\": \"<boolean>\",\n        \"expires\": \"<string>\",\n        \"created\": \"<string>\"\n      }\n    }\n  ]\n}"
														}
													]
												}
											]
										},
										{
											"name": "ignore",
											"item": [
												{
													"name": "{issueId}",
													"item": [
														{
															"name": "Retrieve ignore",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"ignore",
																		":issueId"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The organization ID to modify ignores for. The `API_KEY` must have access to this organization."
																		},
																		{
																			"key": "projectId",
																			"value": "<string>",
																			"description": "(Required) The project ID to modify ignores for."
																		},
																		{
																			"key": "issueId",
																			"value": "<string>",
																			"description": "(Required) The issue ID to modify ignores for. Can be a vulnerability or a license Issue."
																		}
																	]
																},
																"description": "It is possible to modify/retrieve ignored [vulnerability](https://snyk.docs.apiary.io/#introduction/overview-and-entities/vulnerability) or [license](https://snyk.docs.apiary.io/#introduction/overview-and-entities/license-issue) issues for a given organization and project.\nIgnores from `.snyk` files are not included here\n#### Required permissions\n\n- `View Project`\n\n- `View Project Ignores`"
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"ignore",
																				":issueId"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "projectId"
																				},
																				{
																					"key": "issueId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; charset=utf-8"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"ignorePath\": {\n    \"reason\": \"<string>\",\n    \"reasonType\": \"wont-fix\",\n    \"ignoredBy\": {\n      \"name\": \"<string>\",\n      \"email\": \"<string>\",\n      \"id\": \"<string>\"\n    },\n    \"disregardIfFixable\": \"<boolean>\",\n    \"expires\": \"<string>\",\n    \"created\": \"<string>\"\n  }\n}"
																}
															]
														},
														{
															"name": "Add ignore",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"reasonType\": \"wont-fix\",\n  \"disregardIfFixable\": \"<boolean>\",\n  \"ignorePath\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"expires\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"ignore",
																		":issueId"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The organization ID to modify ignores for. The `API_KEY` must have access to this organization."
																		},
																		{
																			"key": "projectId",
																			"value": "<string>",
																			"description": "(Required) The project ID to modify ignores for."
																		},
																		{
																			"key": "issueId",
																			"value": "<string>",
																			"description": "(Required) The issue ID to modify ignores for. Can be a vulnerability or a license Issue."
																		}
																	]
																},
																"description": "It is possible to modify/retrieve ignored [vulnerability](https://snyk.docs.apiary.io/#introduction/overview-and-entities/vulnerability) or [license](https://snyk.docs.apiary.io/#introduction/overview-and-entities/license-issue) issues for a given organization and project.\nIgnores from `.snyk` files are not included here\n#### Required permissions\n\n- `View Organization`\n\n- `View Project Ignores`\n\n- `Create new project ignores`"
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"reasonType\": \"wont-fix\",\n  \"disregardIfFixable\": \"<boolean>\",\n  \"ignorePath\": \"<string>\",\n  \"reason\": \"<string>\",\n  \"expires\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"ignore",
																				":issueId"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "projectId"
																				},
																				{
																					"key": "issueId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; charset=utf-8"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"ignorePath\": {\n    \"reason\": \"<string>\",\n    \"reasonType\": \"wont-fix\",\n    \"ignoredBy\": {\n      \"name\": \"<string>\",\n      \"email\": \"<string>\",\n      \"id\": \"<string>\"\n    },\n    \"disregardIfFixable\": \"<boolean>\",\n    \"expires\": \"<string>\",\n    \"created\": \"<string>\"\n  }\n}"
																}
															]
														},
														{
															"name": "Replace ignores",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n  {\n    \"disregardIfFixable\": \"<boolean>\",\n    \"ignorePath\": \"<string>\",\n    \"reason\": \"<string>\",\n    \"reasonType\": \"wont-fix\",\n    \"expires\": \"<string>\"\n  },\n  {\n    \"disregardIfFixable\": \"<boolean>\",\n    \"ignorePath\": \"<string>\",\n    \"reason\": \"<string>\",\n    \"reasonType\": \"not-vulnerable\",\n    \"expires\": \"<string>\"\n  }\n]",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"ignore",
																		":issueId"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The organization ID to modify ignores for. The `API_KEY` must have access to this organization."
																		},
																		{
																			"key": "projectId",
																			"value": "<string>",
																			"description": "(Required) The project ID to modify ignores for."
																		},
																		{
																			"key": "issueId",
																			"value": "<string>",
																			"description": "(Required) The issue ID to modify ignores for. Can be a vulnerability or a license Issue."
																		}
																	]
																},
																"description": "It is possible to modify/retrieve ignored [vulnerability](https://snyk.docs.apiary.io/#introduction/overview-and-entities/vulnerability) or [license](https://snyk.docs.apiary.io/#introduction/overview-and-entities/license-issue) issues for a given organization and project.\nIgnores from `.snyk` files are not included here\n#### Required permissions\n\n- `View Organization`\n\n- `View Project Ignores`\n\n- `Edit Project Ignores`"
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "[\n  {\n    \"disregardIfFixable\": \"<boolean>\",\n    \"ignorePath\": \"<string>\",\n    \"reason\": \"<string>\",\n    \"reasonType\": \"wont-fix\",\n    \"expires\": \"<string>\"\n  },\n  {\n    \"disregardIfFixable\": \"<boolean>\",\n    \"ignorePath\": \"<string>\",\n    \"reason\": \"<string>\",\n    \"reasonType\": \"not-vulnerable\",\n    \"expires\": \"<string>\"\n  }\n]",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"ignore",
																				":issueId"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "projectId"
																				},
																				{
																					"key": "issueId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; charset=utf-8"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"ignorePath\": {\n      \"reason\": \"<string>\",\n      \"reasonType\": \"temporary-ignore\",\n      \"ignoredBy\": {\n        \"name\": \"<string>\",\n        \"email\": \"<string>\",\n        \"id\": \"<string>\"\n      },\n      \"disregardIfFixable\": \"<boolean>\",\n      \"expires\": \"<string>\",\n      \"created\": \"<string>\"\n    }\n  },\n  {\n    \"ignorePath\": {\n      \"reason\": \"<string>\",\n      \"reasonType\": \"wont-fix\",\n      \"ignoredBy\": {\n        \"name\": \"<string>\",\n        \"email\": \"<string>\",\n        \"id\": \"<string>\"\n      },\n      \"disregardIfFixable\": \"<boolean>\",\n      \"expires\": \"<string>\",\n      \"created\": \"<string>\"\n    }\n  }\n]"
																}
															]
														},
														{
															"name": "Delete ignores",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"ignore",
																		":issueId"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The organization ID to modify ignores for. The `API_KEY` must have access to this organization."
																		},
																		{
																			"key": "projectId",
																			"value": "<string>",
																			"description": "(Required) The project ID to modify ignores for."
																		},
																		{
																			"key": "issueId",
																			"value": "<string>",
																			"description": "(Required) The issue ID to modify ignores for. Can be a vulnerability or a license Issue."
																		}
																	]
																},
																"description": "It is possible to modify/retrieve ignored [vulnerability](https://snyk.docs.apiary.io/#introduction/overview-and-entities/vulnerability) or [license](https://snyk.docs.apiary.io/#introduction/overview-and-entities/license-issue) issues for a given organization and project.\nIgnores from `.snyk` files are not included here\n#### Required permissions\n\n- `View Organization`\n\n- `View Project Ignores`\n\n- `Remove Project Ignores`"
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/ignore/:issueId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"ignore",
																				":issueId"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "projectId"
																				},
																				{
																					"key": "issueId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												}
											]
										},
										{
											"name": "jira-issues",
											"item": [
												{
													"name": "List all jira issues",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/jira-issues",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"jira-issues"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID to list Jira issues for. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID to list Jira issues for."
																}
															]
														},
														"description": "If you have configured an integration with Jira, it is possible to create Jira issues for project vulnerabilities or license issues directly from the Snyk API.\n\nThe Jira integration is available to customers on the pro or enterprise plan.\n\nAt the moment, the usage of the Jira integration via the API is not supported for Snyk Infrastructure as Code\n#### Required permissions\n\n- `View Jira issues`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/jira-issues",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"jira-issues"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"issueId\": [\n    {\n      \"jiraIssue\": {\n        \"id\": \"<string>\",\n        \"key\": \"<string>\"\n      }\n    },\n    {\n      \"jiraIssue\": {\n        \"id\": \"<string>\",\n        \"key\": \"<string>\"\n      }\n    }\n  ]\n}"
														}
													]
												}
											]
										},
										{
											"name": "settings",
											"item": [
												{
													"name": "List project settings",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"settings"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID to which the project belongs. The API_KEY must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID"
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`"
													},
													"response": [
														{
															"name": "The response will contain only attributes that can be updated (see `ATTRIBUTES` section in `Update project settings`) and that have been previously set.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/settings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"settings"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": \"<string>\"\n}"
														}
													]
												},
												{
													"name": "Update project settings",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"settings"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID to which the project belongs. The API_KEY must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID"
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Edit Project`"
													},
													"response": [
														{
															"name": "The response will contain the attributes and values that have been sent in the request and successfully updated.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/settings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"settings"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"autoDepUpgradeEnabled\": \"<boolean>\",\n  \"autoDepUpgradeIgnoredDependencies\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"autoDepUpgradeMinAge\": \"<number>\",\n  \"autoDepUpgradeLimit\": \"<number>\",\n  \"pullRequestFailOnAnyVulns\": \"<boolean>\",\n  \"pullRequestFailOnlyForHighSeverity\": \"<boolean>\",\n  \"pullRequestTestEnabled\": \"<boolean>\",\n  \"pullRequestAssignment\": \"<string>\",\n  \"autoRemediationPrs\": \"<string>\"\n}"
														}
													]
												},
												{
													"name": "Delete project settings",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/settings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"settings"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID to which the project belongs. The API_KEY must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID"
																}
															]
														},
														"description": "Deleting project settings will set the project to inherit default settings from its integration.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Edit Project`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/settings",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"settings"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "move",
											"item": [
												{
													"name": "Move project to a different organization",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"targetOrgId\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/move",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"move"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID to which the project belongs. The API_KEY must have group admin permissions. If the project is moved to a new group, a personal level API key is needed."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID."
																}
															]
														},
														"description": "Note: when moving a project to a new organization, the historical data used for reporting does not move with it.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Move Project`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"targetOrgId\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/move",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"move"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"originOrg\": \"<string>\",\n  \"destinationOrg\": \"<string>\",\n  \"movedProject\": \"<string>\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "tags",
											"item": [
												{
													"name": "remove",
													"item": [
														{
															"name": "Remove a tag from a project",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/tags/remove",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"tags",
																		"remove"
																	],
																	"variable": [
																		{
																			"key": "orgId",
																			"value": "<string>",
																			"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																		},
																		{
																			"key": "projectId",
																			"value": "<string>",
																			"description": "(Required) The project ID to remove a tag from"
																		}
																	]
																},
																"description": "#### Required permissions\n\n- Group Admin"
															},
															"response": [
																{
																	"name": "Untitled Response",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json; charset=utf-8"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/org/:orgId/project/:projectId/tags/remove",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"org",
																				":orgId",
																				"project",
																				":projectId",
																				"tags",
																				"remove"
																			],
																			"variable": [
																				{
																					"key": "orgId"
																				},
																				{
																					"key": "projectId"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json; charset=utf-8"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"tags\": [\n    {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n    },\n    {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n    }\n  ]\n}"
																}
															]
														}
													]
												},
												{
													"name": "Add a tag to a project",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/tags",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"tags"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID to apply the tag to"
																}
															]
														},
														"description": "​\n\n#### Required permissions\n\n- Group Admin"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/tags",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"tags"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"tags\": [\n    {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n    },\n    {\n      \"key\": \"<string>\",\n      \"value\": \"<string>\"\n    }\n  ]\n}"
														}
													]
												}
											]
										},
										{
											"name": "attributes",
											"item": [
												{
													"name": "Applying attributes",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"criticality\": [\n    \"medium\",\n    \"critical\"\n  ],\n  \"environment\": [\n    \"frontend\",\n    \"onprem\"\n  ],\n  \"lifecycle\": [\n    \"production\",\n    \"sandbox\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId/attributes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId",
																"attributes"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "projectId",
																	"value": "<string>",
																	"description": "(Required) The project ID to remove a tag from"
																}
															]
														},
														"description": "Attributes are static and non-configurable fields which allow to add additional metadata to a project.\nAttributes have a pre-defined list of values that a user can select from.\n\n| Business criticality | Environment | Lifecycle stage |\n|:--------------------:|:-----------:|:---------------:|\n|       critical       |   frontend  |    production   |\n|         high         |   backend   |   development   |\n|        medium        |   internal  |     sandbox     |\n|          low         |   external  |                 |\n|                      |    mobile   |                 |\n|                      |     saas    |                 |\n|                      |    onprem   |                 |\n|                      |    hosted   |                 |\n|                      | distributed |                 |Applies an attribute to the provided project.\nIt is possible to assign multiple values to each attribute, but you can only assign values to one of the predefined attribute categories, using the predefined options for this category.\nAssigning an attribute requires the caller to be either an Organization Administrator or a Group Administrator.\nAssigning an attribute will override any existing values that the specific attribute already has set.\nIn order to clear out an attribute value, an empty array can be set.\n\n> **Note:** Organization admins can add an attribute to a Project. However, only Group admins can modify Project attributes in cases where attributes match a policy, because policies can only be managed by Group admins.\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Edit Project Attributes`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"criticality\": [\n    \"medium\",\n    \"critical\"\n  ],\n  \"environment\": [\n    \"frontend\",\n    \"onprem\"\n  ],\n  \"lifecycle\": [\n    \"production\",\n    \"sandbox\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/project/:projectId/attributes",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"project",
																		":projectId",
																		"attributes"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "projectId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"attributes\": {\n    \"criticality\": [\n      \"critical\",\n      \"critical\"\n    ],\n    \"environment\": [\n      \"internal\",\n      \"onprem\"\n    ],\n    \"lifecycle\": [\n      \"production\",\n      \"production\"\n    ]\n  }\n}"
														}
													]
												}
											]
										},
										{
											"name": "Retrieve a single project",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/project/:projectId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"project",
														":projectId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
														},
														{
															"key": "projectId",
															"value": "<string>",
															"description": "(Required) The project ID."
														}
													]
												},
												"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "projectId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"name\": \"<string>\",\n  \"id\": \"<string>\",\n  \"created\": \"<string>\",\n  \"origin\": \"<string>\",\n  \"type\": \"<string>\",\n  \"readOnly\": \"<boolean>\",\n  \"testFrequency\": \"<string>\",\n  \"totalDependencies\": \"<number>\",\n  \"issueCountsBySeverity\": {\n    \"low\": \"<number>\",\n    \"medium\": \"<number>\",\n    \"high\": \"<number>\",\n    \"critical\": \"<number>\"\n  },\n  \"imageId\": \"<string>\",\n  \"imageTag\": \"<string>\",\n  \"imageBaseImage\": \"<string>\",\n  \"imagePlatform\": \"<string>\",\n  \"imageCluster\": \"<string>\",\n  \"hostname\": \"<string>\",\n  \"remoteRepoUrl\": \"<string>\",\n  \"lastTestedDate\": \"<string>\",\n  \"owner\": {},\n  \"browseUrl\": \"<string>\",\n  \"importingUser\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"username\": \"<string>\",\n    \"email\": \"<string>\"\n  },\n  \"isMonitored\": \"<boolean>\",\n  \"branch\": \"<string>\",\n  \"targetReference\": \"<string>\",\n  \"tags\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"attributes\": \"<string>\",\n  \"remediation\": {\n    \"upgrade\": {},\n    \"patch\": {},\n    \"pin\": {}\n  }\n}"
												}
											]
										},
										{
											"name": "Update a project",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"owner\": {\n    \"id\": \"<string>\"\n  },\n  \"branch\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/project/:projectId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"project",
														":projectId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
														},
														{
															"key": "projectId",
															"value": "<string>",
															"description": "(Required) The project ID."
														}
													]
												},
												"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Edit Project`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"owner\": {\n    \"id\": \"<string>\"\n  },\n  \"branch\": \"<string>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "projectId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"name\": \"<string>\",\n  \"id\": \"<string>\",\n  \"created\": \"<string>\",\n  \"origin\": \"<string>\",\n  \"type\": \"<string>\",\n  \"readOnly\": \"<boolean>\",\n  \"testFrequency\": \"<string>\",\n  \"totalDependencies\": \"<number>\",\n  \"issueCountsBySeverity\": {\n    \"low\": \"<number>\",\n    \"medium\": \"<number>\",\n    \"high\": \"<number>\",\n    \"critical\": \"<number>\"\n  },\n  \"imageId\": \"<string>\",\n  \"imageTag\": \"<string>\",\n  \"imageBaseImage\": \"<string>\",\n  \"imagePlatform\": \"<string>\",\n  \"imageCluster\": \"<string>\",\n  \"hostname\": \"<string>\",\n  \"remoteRepoUrl\": \"<string>\",\n  \"lastTestedDate\": \"<string>\",\n  \"owner\": {},\n  \"browseUrl\": \"<string>\",\n  \"importingUser\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"username\": \"<string>\",\n    \"email\": \"<string>\"\n  },\n  \"isMonitored\": \"<boolean>\",\n  \"branch\": \"<string>\",\n  \"targetReference\": \"<string>\",\n  \"tags\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"attributes\": \"<string>\",\n  \"remediation\": {\n    \"upgrade\": {},\n    \"patch\": {},\n    \"pin\": {}\n  }\n}"
												}
											]
										},
										{
											"name": "Delete a project",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/project/:projectId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"project",
														":projectId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
														},
														{
															"key": "projectId",
															"value": "<string>",
															"description": "(Required) The project ID."
														}
													]
												},
												"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `Remove Project`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/project/:projectId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"project",
																":projectId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "projectId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "dependencies",
							"item": [
								{
									"name": "List all dependencies",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"dependencies\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"depStatus\": \"<string>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/dependencies?sortBy=severity&order=desc&page=<double>&perPage=<double>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"dependencies"
											],
											"query": [
												{
													"key": "sortBy",
													"value": "severity",
													"description": "The field to sort results by."
												},
												{
													"key": "order",
													"value": "desc",
													"description": "The direction to sort results by."
												},
												{
													"key": "page",
													"value": "<double>",
													"description": "The page of results to fetch."
												},
												{
													"key": "perPage",
													"value": "<double>",
													"description": "The number of results to fetch per page (maximum is 1000)."
												}
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID to list projects for. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"dependencies\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"depStatus\": \"<string>\"\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/dependencies?sortBy=severity&order=desc&page=<double>&perPage=<double>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"dependencies"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "severity",
															"description": "The field to sort results by."
														},
														{
															"key": "order",
															"value": "desc",
															"description": "The direction to sort results by."
														},
														{
															"key": "page",
															"value": "<double>",
															"description": "The page of results to fetch."
														},
														{
															"key": "perPage",
															"value": "<double>",
															"description": "The number of results to fetch per page (maximum is 1000)."
														}
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Link",
													"value": "",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n  \"results\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"version\": \"<string>\",\n      \"type\": \"<string>\",\n      \"licenses\": [\n        {\n          \"id\": \"<string>\",\n          \"title\": \"<string>\",\n          \"license\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"title\": \"<string>\",\n          \"license\": \"<string>\"\n        }\n      ],\n      \"projects\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        }\n      ],\n      \"latestVersion\": \"<string>\",\n      \"latestVersionPublishedDate\": \"<string>\",\n      \"firstPublishedDate\": \"<string>\",\n      \"isDeprecated\": \"<boolean>\",\n      \"deprecatedVersions\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"dependenciesWithIssues\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"issuesCritical\": \"<number>\",\n      \"issuesHigh\": \"<number>\",\n      \"issuesMedium\": \"<number>\",\n      \"issuesLow\": \"<number>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"version\": \"<string>\",\n      \"type\": \"<string>\",\n      \"licenses\": [\n        {\n          \"id\": \"<string>\",\n          \"title\": \"<string>\",\n          \"license\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"title\": \"<string>\",\n          \"license\": \"<string>\"\n        }\n      ],\n      \"projects\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        }\n      ],\n      \"latestVersion\": \"<string>\",\n      \"latestVersionPublishedDate\": \"<string>\",\n      \"firstPublishedDate\": \"<string>\",\n      \"isDeprecated\": \"<boolean>\",\n      \"deprecatedVersions\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"dependenciesWithIssues\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"issuesCritical\": \"<number>\",\n      \"issuesHigh\": \"<number>\",\n      \"issuesMedium\": \"<number>\",\n      \"issuesLow\": \"<number>\"\n    }\n  ],\n  \"total\": \"<number>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "licenses",
							"item": [
								{
									"name": "List all licenses",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"dependencies\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/licenses?sortBy=severity&order=desc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"licenses"
											],
											"query": [
												{
													"key": "sortBy",
													"value": "severity",
													"description": "The field to sort results by."
												},
												{
													"key": "order",
													"value": "desc",
													"description": "The direction to sort results by."
												}
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID to list projects for. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"dependencies\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/licenses?sortBy=severity&order=desc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"licenses"
													],
													"query": [
														{
															"key": "sortBy",
															"value": "severity",
															"description": "The field to sort results by."
														},
														{
															"key": "order",
															"value": "desc",
															"description": "The direction to sort results by."
														}
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"results\": [\n    {\n      \"id\": \"<string>\",\n      \"dependencies\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"version\": \"<string>\",\n          \"packageManager\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"version\": \"<string>\",\n          \"packageManager\": \"<string>\"\n        }\n      ],\n      \"projects\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        }\n      ],\n      \"severity\": \"low\",\n      \"instructions\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"dependencies\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"version\": \"<string>\",\n          \"packageManager\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"version\": \"<string>\",\n          \"packageManager\": \"<string>\"\n        }\n      ],\n      \"projects\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\"\n        }\n      ],\n      \"severity\": \"high\",\n      \"instructions\": \"<string>\"\n    }\n  ],\n  \"total\": \"<number>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "entitlements",
							"item": [
								{
									"name": "List all entitlements",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/entitlements",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"entitlements"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID to list entitlements for. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Entitlements`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/entitlements",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"entitlements"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"licenses\": \"<boolean>\",\n  \"reports\": \"<boolean>\",\n  \"fullVulnDB\": \"<boolean>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "entitlement",
							"item": [
								{
									"name": "{entitlementKey}",
									"item": [
										{
											"name": "Get an organization's entitlement value",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/entitlement/:entitlementKey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"entitlement",
														":entitlementKey"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID to query the entitlement for. The `API_KEY` must have access to this organization."
														},
														{
															"key": "entitlementKey",
															"value": "licenses",
															"description": "(Required) The entitlement to query."
														}
													]
												},
												"description": "It is possible to query an organization for a specific entitlement, getting its value\n#### Required permissions\n\n- `View Organization`\n\n- `View Entitlements`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/entitlement/:entitlementKey",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"entitlement",
																":entitlementKey"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "entitlementKey"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "<string>"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "webhooks",
							"item": [
								{
									"name": "{webhookId}",
									"item": [
										{
											"name": "ping",
											"item": [
												{
													"name": "Ping a webhook",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/webhooks/:webhookId/ping",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"webhooks",
																":webhookId",
																"ping"
															],
															"variable": [
																{
																	"key": "orgId",
																	"value": "<string>",
																	"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
																},
																{
																	"key": "webhookId",
																	"value": "<string>",
																	"description": "(Required) The webhook ID."
																}
															]
														},
														"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Outbound Webhooks`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/org/:orgId/webhooks/:webhookId/ping",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"org",
																		":orgId",
																		"webhooks",
																		":webhookId",
																		"ping"
																	],
																	"variable": [
																		{
																			"key": "orgId"
																		},
																		{
																			"key": "webhookId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Retrieve a webhook",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/webhooks/:webhookId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"webhooks",
														":webhookId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
														},
														{
															"key": "webhookId",
															"value": "<string>",
															"description": "(Required) The webhook ID."
														}
													]
												},
												"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Outbound Webhooks`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/webhooks/:webhookId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"webhooks",
																":webhookId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "webhookId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<string>\",\n  \"url\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Delete a webhook",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/webhooks/:webhookId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"webhooks",
														":webhookId"
													],
													"variable": [
														{
															"key": "orgId",
															"value": "<string>",
															"description": "(Required) The organization ID the project belongs to. The `API_KEY` must have access to this organization."
														},
														{
															"key": "webhookId",
															"value": "<string>",
															"description": "(Required) The webhook ID."
														}
													]
												},
												"description": "#### Required permissions\n\n- `View Organization`\n\n- `View Outbound Webhooks`\n\n- `Remove Outbound Webhooks`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/org/:orgId/webhooks/:webhookId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"org",
																":orgId",
																"webhooks",
																":webhookId"
															],
															"variable": [
																{
																	"key": "orgId"
																},
																{
																	"key": "webhookId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Create a webhook",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"url\": \"<string>\",\n  \"secret\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/webhooks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"webhooks"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID to list projects for. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "Snyk sends a `ping` event to the newly configured webhook so you can check you're able to receive the transports.### Required permissions\n\n- `View Organization`\n\n- `View Outbound Webhooks`\n\n- `Create Outbound Webhooks`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json; charset=utf-8"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"url\": \"<string>\",\n  \"secret\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/webhooks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"webhooks"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"url\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "List webhooks",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId/webhooks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId",
												"webhooks"
											],
											"variable": [
												{
													"key": "orgId",
													"value": "<string>",
													"description": "(Required) The organization ID to list projects for. The `API_KEY` must have access to this organization."
												}
											]
										},
										"description": "Snyk sends a `ping` event to the newly configured webhook so you can check you're able to receive the transports\n#### Required permissions\n\n- `View Organization`\n\n- `View Outbound Webhooks`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/org/:orgId/webhooks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"org",
														":orgId",
														"webhooks"
													],
													"variable": [
														{
															"key": "orgId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"results\": [\n    {\n      \"id\": \"<string>\",\n      \"url\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"url\": \"<string>\"\n    }\n  ],\n  \"total\": \"<integer>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Remove organization",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/org/:orgId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"org",
										":orgId"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "<string>",
											"description": "(Required) The organization ID. The `API_KEY` must have permission to delete the provided organization. Currently this operation is only supported for organizations without any projects."
										}
									]
								},
								"description": "#### Required permissions\n\n- `View Organization`\n\n- `Remove Organization`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/org/:orgId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"org",
												":orgId"
											],
											"variable": [
												{
													"key": "orgId"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"<string>\",\n  \"groupId\": \"<string>\",\n  \"sourceOrgId\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/org",
						"description": "An organization can be created as part of a group, or independently. If the **groupId** is not provided, a **Personal Org** will be created independent of a group."
					},
					"response": [
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"groupId\": \"<string>\",\n  \"sourceOrgId\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/org"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"slug\": \"<string>\",\n  \"url\": \"<string>\",\n  \"created\": \"<string>\",\n  \"group\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  }\n}"
						},
						{
							"name": "A group of errors that happened in the process of creating a new organization and were unexpected",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json, charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"groupId\": \"<string>\",\n  \"sourceOrgId\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/org"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json, charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorRef\": \"<string>\"\n}"
						},
						{
							"name": "Authorization errors.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json, charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"groupId\": \"<string>\",\n  \"sourceOrgId\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/org"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json, charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorRef\": \"<string>\"\n}"
						},
						{
							"name": "A group of errors that show input errors about the parameters provided in the request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json, charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"groupId\": \"<string>\",\n  \"sourceOrgId\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/org"
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json, charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"message\": \"<string>\",\n  \"errorRef\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "test",
			"item": [
				{
					"name": "maven",
					"item": [
						{
							"name": "{groupId}",
							"item": [
								{
									"name": "{artifactId}",
									"item": [
										{
											"name": "{version}",
											"item": [
												{
													"name": "Test for issues in a public package by group id, artifact id and version",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/test/maven/:groupId/:artifactId/:version?org=<string>&repository=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"test",
																"maven",
																":groupId",
																":artifactId",
																":version"
															],
															"query": [
																{
																	"key": "org",
																	"value": "<string>",
																	"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																},
																{
																	"key": "repository",
																	"value": "<string>",
																	"description": "The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "<string>",
																	"description": "(Required) The package's group ID."
																},
																{
																	"key": "artifactId",
																	"value": "<string>",
																	"description": "(Required) The package's artifact ID."
																},
																{
																	"key": "version",
																	"value": "<string>",
																	"description": "(Required) The package version to test."
																}
															]
														},
														"description": "Test for issues in Maven files.You can test `maven` packages for issues according to their [coordinates](https://maven.apache.org/pom.html#Maven_Coordinates): group ID, artifact ID and version. The repository hosting the package may also be customized (see the `repository` query parameter).\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/test/maven/:groupId/:artifactId/:version?org=<string>&repository=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"test",
																		"maven",
																		":groupId",
																		":artifactId",
																		":version"
																	],
																	"query": [
																		{
																			"key": "org",
																			"value": "<string>",
																			"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																		},
																		{
																			"key": "repository",
																			"value": "<string>",
																			"description": "The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
																		}
																	],
																	"variable": [
																		{
																			"key": "groupId"
																		},
																		{
																			"key": "artifactId"
																		},
																		{
																			"key": "version"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Test maven file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"base64\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/maven?org=<string>&repository=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"maven"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										},
										{
											"key": "repository",
											"value": "<string>",
											"description": "The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
										}
									]
								},
								"description": "Test for issues in Maven files.You can test your Maven packages for issues according to their manifest file using this action. It takes a JSON object containing a the \"target\" `pom.xml`.\n\nAdditional manifest files, if they are needed, like parent `pom.xml` files, child poms, etc., according the the definitions in the target `pom.xml` file, should be supplied in the `additional` body parameter.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"base64\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/maven?org=<string>&repository=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"maven"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												},
												{
													"key": "repository",
													"value": "<string>",
													"description": "The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "npm",
					"item": [
						{
							"name": "{packageName}",
							"item": [
								{
									"name": "{version}",
									"item": [
										{
											"name": "Test for issues in a public package by name and version",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/npm/:packageName/:version?org=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"npm",
														":packageName",
														":version"
													],
													"query": [
														{
															"key": "org",
															"value": "<string>",
															"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
														}
													],
													"variable": [
														{
															"key": "packageName",
															"value": "<string>",
															"description": "(Required) The package name. For scoped packages, **must** be url-encoded, so to test \"@angular/core\" version 4.3.2, one should `GET /test/npm/%40angular%2Fcore/4.3.2`."
														},
														{
															"key": "version",
															"value": "<string>",
															"description": "(Required) The Package version to test."
														}
													]
												},
												"description": "Test for issues in npm files.You can test `npm` packages for issues according to their name and version.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/test/npm/:packageName/:version?org=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"test",
																"npm",
																":packageName",
																":version"
															],
															"query": [
																{
																	"key": "org",
																	"value": "<string>",
																	"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																}
															],
															"variable": [
																{
																	"key": "packageName"
																},
																{
																	"key": "version"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"ALTERNATIVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"NSP\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          },\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          }\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"ALTERNATIVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"NSP\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          },\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          }\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Test package.json & package-lock.json File",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"plain\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/npm?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"npm"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in npm files.You can test your npm packages for issues according to their manifest file & optional lockfile using this action. It takes a JSON object containing a \"target\" `package.json` and optionally a `package-lock.json`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"plain\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/npm?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"npm"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"ALTERNATIVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"NSP\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          },\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          }\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"ALTERNATIVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"NSP\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          },\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          }\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "golangdep",
					"item": [
						{
							"name": "Test Gopkg.toml & Gopkg.lock File",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"base64\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/golangdep?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"golangdep"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in Go dep files.You can test your Go dep packages for issues according to their manifest file & lockfile using this action. It takes a JSON object containing a \"target\" `Gopkg.toml` and a `Gopkg.lock`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"base64\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/golangdep?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"golangdep"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"hashesRange\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerableHashes\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"hashesRange\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerableHashes\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerableHashes\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerableHashes\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      }\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "govendor",
					"item": [
						{
							"name": "Test vendor.json File",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/govendor?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"govendor"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in Go vendor files.You can test your Go vendor packages for issues according to their manifest file using this action. It takes a JSON object containing a \"target\" `vendor.json`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/govendor?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"govendor"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"hashesRange\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerableHashes\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"hashesRange\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"vulnerableHashes\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "yarn",
					"item": [
						{
							"name": "Test package.json & yarn.lock File",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"plain\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/yarn?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"yarn"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in yarn files.You can test your yarn packages for issues according to their manifest file & lockfile using this action. It takes a JSON object containing a \"target\" `package.json` and a `yarn.lock`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      },\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"plain\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/yarn?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"yarn"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"ALTERNATIVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"NSP\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          },\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          }\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"filePath\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"ALTERNATIVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"NSP\": [\n            \"<integer>\",\n            \"<integer>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          },\n          {\n            \"comments\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"id\": \"<string>\",\n            \"modificationTime\": \"<string>\",\n            \"urls\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"version\": \"<string>\"\n          }\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "rubygems",
					"item": [
						{
							"name": "{gemName}",
							"item": [
								{
									"name": "{version}",
									"item": [
										{
											"name": "Test for issues in a public gem by name and version",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/rubygems/:gemName/:version?org=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"rubygems",
														":gemName",
														":version"
													],
													"query": [
														{
															"key": "org",
															"value": "<string>",
															"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
														}
													],
													"variable": [
														{
															"key": "gemName",
															"value": "<string>",
															"description": "(Required) The gem name."
														},
														{
															"key": "version",
															"value": "<string>",
															"description": "(Required) The gem version to test."
														}
													]
												},
												"description": "Test for issues in rubygems packages and applications.You can test `rubygems` packages for issues according to their name and version.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/test/rubygems/:gemName/:version?org=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"test",
																"rubygems",
																":gemName",
																":version"
															],
															"query": [
																{
																	"key": "org",
																	"value": "<string>",
																	"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																}
															],
															"variable": [
																{
																	"key": "gemName"
																},
																{
																	"key": "version"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Test gemfile.lock file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"base64\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/rubygems?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"rubygems"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in rubygems packages and applications.You can test your rubygems applications for issues according to their lockfile using this action. It takes a JSON object containing a the \"target\" `Gemfile.lock`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"base64\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/rubygems?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"rubygems"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"OSVDB\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"OSVDB\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "gradle",
					"item": [
						{
							"name": "{group}",
							"item": [
								{
									"name": "{name}",
									"item": [
										{
											"name": "{version}",
											"item": [
												{
													"name": "Test for issues in a public package by group, name and version",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/test/gradle/:group/:name/:version?org=<string>&repository=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"test",
																"gradle",
																":group",
																":name",
																":version"
															],
															"query": [
																{
																	"key": "org",
																	"value": "<string>",
																	"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																},
																{
																	"key": "repository",
																	"value": "<string>",
																	"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
																}
															],
															"variable": [
																{
																	"key": "group",
																	"value": "<string>",
																	"description": "(Required) The package's group ID."
																},
																{
																	"key": "name",
																	"value": "<string>",
																	"description": "(Required) The package's artifact ID."
																},
																{
																	"key": "version",
																	"value": "<string>",
																	"description": "(Required) The package version to test."
																}
															]
														},
														"description": "Test for issues in Gradle files.You can test `gradle` packages for issues according to their group, name and version. This is done via the maven endpoint (for Java), since the packages are hosted on maven central or a compatible repository. See \"Maven\" above for details.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/test/gradle/:group/:name/:version?org=<string>&repository=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"test",
																		"gradle",
																		":group",
																		":name",
																		":version"
																	],
																	"query": [
																		{
																			"key": "org",
																			"value": "<string>",
																			"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																		},
																		{
																			"key": "repository",
																			"value": "<string>",
																			"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
																		}
																	],
																	"variable": [
																		{
																			"key": "group"
																		},
																		{
																			"key": "name"
																		},
																		{
																			"key": "version"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Test gradle file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/gradle?org=<string>&repository=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"gradle"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										},
										{
											"key": "repository",
											"value": "<string>",
											"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
										}
									]
								},
								"description": "Test for issues in Gradle files.You can test your Gradle packages for issues according to their manifest file using this action. It takes a JSON object containing the \"target\" `build.gradle`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/gradle?org=<string>&repository=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"gradle"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												},
												{
													"key": "repository",
													"value": "<string>",
													"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "sbt",
					"item": [
						{
							"name": "{groupId}",
							"item": [
								{
									"name": "{artifactId}",
									"item": [
										{
											"name": "{version}",
											"item": [
												{
													"name": "sbt_Test for issues in a public package by group id, artifact id and version",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/test/sbt/:groupId/:artifactId/:version?org=<string>&repository=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"test",
																"sbt",
																":groupId",
																":artifactId",
																":version"
															],
															"query": [
																{
																	"key": "org",
																	"value": "<string>",
																	"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																},
																{
																	"key": "repository",
																	"value": "<string>",
																	"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
																}
															],
															"variable": [
																{
																	"key": "groupId",
																	"value": "<string>",
																	"description": "(Required) The package's group ID."
																},
																{
																	"key": "artifactId",
																	"value": "<string>",
																	"description": "(Required) The package's artifact ID."
																},
																{
																	"key": "version",
																	"value": "<string>",
																	"description": "(Required) The package version to test."
																}
															]
														},
														"description": "Test for issues in sbt files.You can test `sbt` packages for issues according to their group ID, artifact ID and version. This is done via the maven endpoint (for Java), since the packages are hosted on maven central or a compatible repository. See \"Maven\" above for details.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
													},
													"response": [
														{
															"name": "Untitled Response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json; charset=utf-8"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/test/sbt/:groupId/:artifactId/:version?org=<string>&repository=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"test",
																		"sbt",
																		":groupId",
																		":artifactId",
																		":version"
																	],
																	"query": [
																		{
																			"key": "org",
																			"value": "<string>",
																			"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																		},
																		{
																			"key": "repository",
																			"value": "<string>",
																			"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
																		}
																	],
																	"variable": [
																		{
																			"key": "groupId"
																		},
																		{
																			"key": "artifactId"
																		},
																		{
																			"key": "version"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json; charset=utf-8"
																}
															],
															"cookie": [],
															"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Test sbt file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/sbt?org=<string>&repository=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"sbt"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										},
										{
											"key": "repository",
											"value": "<string>",
											"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
										}
									]
								},
								"description": "Test for issues in sbt files.You can test your `sbt` packages for issues according to their manifest file using this action. It takes a JSON object containing a the \"target\" `build.sbt`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/sbt?org=<string>&repository=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"sbt"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												},
												{
													"key": "repository",
													"value": "<string>",
													"description": "The repository hosting this package. The default value is Maven Central. More than one value is supported, in order."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          },\n          {\n            \"functionId\": {\n              \"className\": \"<string>\",\n              \"functionName\": \"<string>\"\n            },\n            \"version\": [\n              \"<string>\",\n              \"<string>\"\n            ]\n          }\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      }\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "pip",
					"item": [
						{
							"name": "{packageName}",
							"item": [
								{
									"name": "{version}",
									"item": [
										{
											"name": "pip_Test for issues in a public package by name and version",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/test/pip/:packageName/:version?org=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"test",
														"pip",
														":packageName",
														":version"
													],
													"query": [
														{
															"key": "org",
															"value": "<string>",
															"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
														}
													],
													"variable": [
														{
															"key": "packageName",
															"value": "<string>",
															"description": "(Required) The package name."
														},
														{
															"key": "version",
															"value": "<string>",
															"description": "(Required) The Package version to test."
														}
													]
												},
												"description": "Test for issues in pip files.You can test `pip` packages for issues according to their name and version.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/test/pip/:packageName/:version?org=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"test",
																"pip",
																":packageName",
																":version"
															],
															"query": [
																{
																	"key": "org",
																	"value": "<string>",
																	"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
																}
															],
															"variable": [
																{
																	"key": "packageName"
																},
																{
																	"key": "version"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Test requirements.txt file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/pip?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"pip"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in pip files.You can test your pip packages for issues according to their manifest file using this action. It takes a JSON object containing a the \"target\" `requirements.txt`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    }\n  },\n  \"encoding\": \"plain\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/pip?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"pip"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "composer",
					"item": [
						{
							"name": "Test composer.json & composer.lock file",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"base64\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/composer?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"composer"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in PHP composer.json and composer.lock files.You can test your Composer packages for issues according to their manifest file & lockfile using this action. It takes a JSON object containing a \"target\" `composer.json` and a `composer.lock`.\n\n#### Required permissions\n\n- `View Organization`\n\n- `Test Packages`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"files\": {\n    \"target\": {\n      \"contents\": \"<string>\"\n    },\n    \"additional\": [\n      {\n        \"contents\": \"<string>\"\n      }\n    ]\n  },\n  \"encoding\": \"base64\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/composer?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"composer"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"issues\": {\n    \"vulnerabilities\": [\n      {\n        \"id\": \"<string>\",\n        \"url\": \"<string>\",\n        \"title\": \"<string>\",\n        \"type\": \"<string>\",\n        \"description\": \"<string>\",\n        \"functions\": [\n          \"<string>\"\n        ],\n        \"from\": [\n          \"<string>\"\n        ],\n        \"package\": \"<string>\",\n        \"version\": \"<string>\",\n        \"severity\": \"<string>\",\n        \"exploitMaturity\": \"<string>\",\n        \"language\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"semver\": {\n          \"vulnerable\": [\n            \"<string>\"\n          ]\n        },\n        \"publicationTime\": \"<string>\",\n        \"disclosureTime\": \"<string>\",\n        \"isUpgradable\": \"<boolean>\",\n        \"isPatchable\": \"<boolean>\",\n        \"isPinnable\": \"<boolean>\",\n        \"identifiers\": {\n          \"CVE\": [\n            \"<string>\"\n          ],\n          \"CWE\": [\n            \"<string>\"\n          ]\n        },\n        \"credit\": [\n          \"<string>\"\n        ],\n        \"CVSSv3\": \"<string>\",\n        \"cvssScore\": \"<number>\",\n        \"patches\": [\n          \"<string>\"\n        ],\n        \"upgradePath\": [\n          \"<string>\"\n        ]\n      }\n    ],\n    \"licenses\": [\n      \"<string>\"\n    ]\n  },\n  \"dependencyCount\": \"<integer>\",\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  },\n  \"licensesPolicy\": \"<string>\",\n  \"packageManager\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "dep-graph",
					"item": [
						{
							"name": "Test Dep Graph",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"depGraph\": {\n    \"schemaVersion\": \"<string>\",\n    \"pkgManager\": {\n      \"name\": \"<string>\",\n      \"repositories\": [\n        {\n          \"alias\": \"<string>\"\n        },\n        {\n          \"alias\": \"<string>\"\n        }\n      ]\n    },\n    \"pkgs\": [\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      }\n    ],\n    \"graph\": {\n      \"rootNodeId\": \"<string>\",\n      \"nodes\": [\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        },\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/test/dep-graph?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"test",
										"dep-graph"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Test for issues in a [Snyk dependency graph](https://github.com/snyk/dep-graph).\n\nExperimental! Note these endpoints are subject to change and only available to selected users. Please\ncontact [support@snyk.io](mailto:support@snyk.io) to request access.\n\nThe following package managers are supported:\n\n* deb\n\n* gomodules\n\n* gradle\n\n* maven\n\n* nuget\n\n* paket\n\n* pip\n\n* rpm\n\n* rubygems\n\n* cocoapods\n\n* npm\n\n* yarnUse this endpoint to find issues in a [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata).\n\n#### Required permissions\n\n- `View Organization`\n\n- `View Project`\n\n- `View Project Snapshot`\n\n- `Test Project`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"depGraph\": {\n    \"schemaVersion\": \"<string>\",\n    \"pkgManager\": {\n      \"name\": \"<string>\",\n      \"repositories\": [\n        {\n          \"alias\": \"<string>\"\n        },\n        {\n          \"alias\": \"<string>\"\n        }\n      ]\n    },\n    \"pkgs\": [\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      }\n    ],\n    \"graph\": {\n      \"rootNodeId\": \"<string>\",\n      \"nodes\": [\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        },\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/test/dep-graph?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"test",
												"dep-graph"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"packageManager\": \"<string>\",\n  \"issuesData\": {\n    \"SNYK-JAVA-CHQOSLOGBACK-30208\": {\n      \"CVSSv3\": \"<string>\",\n      \"credit\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"cvssScore\": \"<number>\",\n      \"description\": \"<string>\",\n      \"disclosureTime\": \"<string>\",\n      \"fixedIn\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"id\": \"<string>\",\n      \"identifiers\": {\n        \"CVE\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"CWE\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"language\": \"<string>\",\n      \"mavenModuleName\": {\n        \"artifactId\": \"<string>\",\n        \"groupId\": \"<string>\"\n      },\n      \"moduleName\": \"<string>\",\n      \"packageManager\": \"<string>\",\n      \"packageName\": \"<string>\",\n      \"patches\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"semver\": {\n        \"vulnerable\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      \"severity\": \"<string>\",\n      \"title\": \"<string>\"\n    }\n  },\n  \"issues\": [\n    {\n      \"pkgName\": \"<string>\",\n      \"pkgVersion\": \"<string>\",\n      \"issueId\": \"<string>\",\n      \"fixInfo\": {}\n    },\n    {\n      \"pkgName\": \"<string>\",\n      \"pkgVersion\": \"<string>\",\n      \"issueId\": \"<string>\",\n      \"fixInfo\": {}\n    }\n  ],\n  \"org\": {\n    \"name\": \"<string>\",\n    \"id\": \"<string>\"\n  }\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "monitor",
			"item": [
				{
					"name": "dep-graph",
					"item": [
						{
							"name": "Monitor Dep Graph",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"depGraph\": {\n    \"schemaVersion\": \"<string>\",\n    \"pkgManager\": {\n      \"name\": \"<string>\",\n      \"repositories\": [\n        {\n          \"alias\": \"<string>\"\n        },\n        {\n          \"alias\": \"<string>\"\n        }\n      ]\n    },\n    \"pkgs\": [\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      }\n    ],\n    \"graph\": {\n      \"rootNodeId\": \"<string>\",\n      \"nodes\": [\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        },\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"meta\": {\n    \"targetFramework\": \"<string>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/monitor/dep-graph?org=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"monitor",
										"dep-graph"
									],
									"query": [
										{
											"key": "org",
											"value": "<string>",
											"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
										}
									]
								},
								"description": "Experimental! Note these endpoints are subject to change and only available to selected users. Please\ncontact [support@snyk.io](mailto:support@snyk.io) to request access.\n\nThe following package managers are supported:\n\n* deb\n\n* gomodules\n\n* gradle\n\n* maven\n\n* nuget\n\n* paket\n\n* pip\n\n* rpm\n\n* rubygems\n\n* cocoapods\n\n* npm\n\n* yarn\n\nThe name of the root node in the dep-graph is used as the project name when creating a project. This should\nbe unique for your organization. In the example given below 'my-maven-app' will be the project name.\n\nTo inform Snyk that some dependencies in your project have changed ensure subsequent requests use the same root node\nname.Use this endpoint to monitor a [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata).\n\n#### Required permissions\n\n- `View Organization`\n\n- `Add Project`\n\n- `Test Project`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=utf-8"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"depGraph\": {\n    \"schemaVersion\": \"<string>\",\n    \"pkgManager\": {\n      \"name\": \"<string>\",\n      \"repositories\": [\n        {\n          \"alias\": \"<string>\"\n        },\n        {\n          \"alias\": \"<string>\"\n        }\n      ]\n    },\n    \"pkgs\": [\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"info\": {\n          \"name\": \"<string>\",\n          \"version\": \"<string>\"\n        }\n      }\n    ],\n    \"graph\": {\n      \"rootNodeId\": \"<string>\",\n      \"nodes\": [\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        },\n        {\n          \"nodeId\": \"<string>\",\n          \"pkgId\": \"<string>\",\n          \"deps\": [\n            {\n              \"nodeId\": \"<string>\"\n            },\n            {\n              \"nodeId\": \"<string>\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"meta\": {\n    \"targetFramework\": \"<string>\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/monitor/dep-graph?org=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"monitor",
												"dep-graph"
											],
											"query": [
												{
													"key": "org",
													"value": "<string>",
													"description": "The organization to test the package with. See \"The Snyk organization for a request\" above."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"ok\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"uri\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "reporting",
			"item": [
				{
					"name": "issues",
					"item": [
						{
							"name": "latest",
							"item": [
								{
									"name": "Get list of latest issues",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"issues\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"identifier\": \"<string>\",\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isFixed\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reporting/issues/latest?page=<double>&perPage=<double>&sortBy=isPatchable&order=<string>&groupBy=issue",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reporting",
												"issues",
												"latest"
											],
											"query": [
												{
													"key": "page",
													"value": "<double>",
													"description": "The page of results to request"
												},
												{
													"key": "perPage",
													"value": "<double>",
													"description": "The number of results to return per page (Maximum: 1000)"
												},
												{
													"key": "sortBy",
													"value": "isPatchable",
													"description": "The key to sort results by"
												},
												{
													"key": "order",
													"value": "<string>",
													"description": "The direction to sort results."
												},
												{
													"key": "groupBy",
													"value": "issue",
													"description": "Set to issue to group the same issue in multiple projects"
												}
											]
										},
										"description": "Returns issues currently in existence. This data can take up to 9 hours to refresh\n#### Required permissions\n\n- `View Project` for every Organization in `filters.orgs`\n\n- `View Organization Reports` for every Organization in `filters.orgs`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"issues\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"identifier\": \"<string>\",\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isFixed\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/issues/latest?page=<double>&perPage=<double>&sortBy=isPatchable&order=<string>&groupBy=issue",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"issues",
														"latest"
													],
													"query": [
														{
															"key": "page",
															"value": "<double>",
															"description": "The page of results to request"
														},
														{
															"key": "perPage",
															"value": "<double>",
															"description": "The number of results to return per page (Maximum: 1000)"
														},
														{
															"key": "sortBy",
															"value": "isPatchable",
															"description": "The key to sort results by"
														},
														{
															"key": "order",
															"value": "<string>",
															"description": "The direction to sort results."
														},
														{
															"key": "groupBy",
															"value": "issue",
															"description": "Set to issue to group the same issue in multiple projects"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"results\": [\n    [\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      },\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      }\n    ],\n    [\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      },\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      }\n    ]\n  ],\n  \"total\": \"<number>\"\n}"
										},
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"issues\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"identifier\": \"<string>\",\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isFixed\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/issues/latest?page=<double>&perPage=<double>&sortBy=isPatchable&order=<string>&groupBy=issue",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"issues",
														"latest"
													],
													"query": [
														{
															"key": "page",
															"value": "<double>",
															"description": "The page of results to request"
														},
														{
															"key": "perPage",
															"value": "<double>",
															"description": "The number of results to return per page (Maximum: 1000)"
														},
														{
															"key": "sortBy",
															"value": "isPatchable",
															"description": "The key to sort results by"
														},
														{
															"key": "order",
															"value": "<string>",
															"description": "The direction to sort results."
														},
														{
															"key": "groupBy",
															"value": "issue",
															"description": "Set to issue to group the same issue in multiple projects"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<number>\",\n  \"ok\": \"<boolean>\",\n  \"error\": {\n    \"name\": \"<string>\",\n    \"innerErrors\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get list of issues",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"issues\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"identifier\": \"<string>\",\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isFixed\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reporting/issues?from=<string>&to=<string>&page=<double>&perPage=<double>&sortBy=isPatchable&order=<string>&groupBy=issue",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reporting",
										"issues"
									],
									"query": [
										{
											"key": "from",
											"value": "<string>",
											"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
										},
										{
											"key": "to",
											"value": "<string>",
											"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
										},
										{
											"key": "page",
											"value": "<double>",
											"description": "The page of results to request"
										},
										{
											"key": "perPage",
											"value": "<double>",
											"description": "The number of results to return per page (Maximum: 1000)"
										},
										{
											"key": "sortBy",
											"value": "isPatchable",
											"description": "The key to sort results by"
										},
										{
											"key": "order",
											"value": "<string>",
											"description": "The direction to sort results."
										},
										{
											"key": "groupBy",
											"value": "issue",
											"description": "Set to issue to group the same issue in multiple projects"
										}
									]
								},
								"description": "Returns any issues that are present during the specified timeframe. For example, if an issue from 2018 is still considered a vulnerable today, it will show up in all reports from its inception to the current day. This data can take up to 9 hours to refresh.**Note:** A vulnerability that was introduced and then resolved on the same day will not show up in the response.\n\n#### Required permissions\n\n- `View Project` for every Organization in `filters.orgs`\n\n- `View Organization Reports` for every Organization in `filters.orgs`"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"issues\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"identifier\": \"<string>\",\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isFixed\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reporting/issues?from=<string>&to=<string>&page=<double>&perPage=<double>&sortBy=isPatchable&order=<string>&groupBy=issue",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reporting",
												"issues"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
												},
												{
													"key": "to",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
												},
												{
													"key": "page",
													"value": "<double>",
													"description": "The page of results to request"
												},
												{
													"key": "perPage",
													"value": "<double>",
													"description": "The number of results to return per page (Maximum: 1000)"
												},
												{
													"key": "sortBy",
													"value": "isPatchable",
													"description": "The key to sort results by"
												},
												{
													"key": "order",
													"value": "<string>",
													"description": "The direction to sort results."
												},
												{
													"key": "groupBy",
													"value": "issue",
													"description": "Set to issue to group the same issue in multiple projects"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"results\": [\n    [\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      },\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      }\n    ],\n    [\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      },\n      {\n        \"url\": \"<string>\",\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"source\": \"<string>\",\n        \"packageManager\": \"<string>\",\n        \"targetFile\": \"<string>\"\n      }\n    ]\n  ],\n  \"total\": \"<number>\"\n}"
								},
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"exploitMaturity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"issues\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"identifier\": \"<string>\",\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isFixed\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reporting/issues?from=<string>&to=<string>&page=<double>&perPage=<double>&sortBy=isPatchable&order=<string>&groupBy=issue",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reporting",
												"issues"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
												},
												{
													"key": "to",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
												},
												{
													"key": "page",
													"value": "<double>",
													"description": "The page of results to request"
												},
												{
													"key": "perPage",
													"value": "<double>",
													"description": "The number of results to return per page (Maximum: 1000)"
												},
												{
													"key": "sortBy",
													"value": "isPatchable",
													"description": "The key to sort results by"
												},
												{
													"key": "order",
													"value": "<string>",
													"description": "The direction to sort results."
												},
												{
													"key": "groupBy",
													"value": "issue",
													"description": "Set to issue to group the same issue in multiple projects"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"<number>\",\n  \"ok\": \"<boolean>\",\n  \"error\": {\n    \"name\": \"<string>\",\n    \"innerErrors\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "counts",
					"item": [
						{
							"name": "issues",
							"item": [
								{
									"name": "latest",
									"item": [
										{
											"name": "Get latest issue counts",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/counts/issues/latest?groupBy=project,[severity|fixable]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"counts",
														"issues",
														"latest"
													],
													"query": [
														{
															"key": "groupBy",
															"value": "project,[severity|fixable]",
															"description": "The field to group results by"
														}
													]
												},
												"description": "Returns the number of issues currently in existence. This data can take up to 9 hours to refresh\n#### Required permissions\n\n- `View Project` for every Organization in `filters.orgs`\n\n- `View Organization Reports` for every Organization in `filters.orgs`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/reporting/counts/issues/latest?groupBy=project,[severity|fixable]",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reporting",
																"counts",
																"issues",
																"latest"
															],
															"query": [
																{
																	"key": "groupBy",
																	"value": "project,[severity|fixable]",
																	"description": "The field to group results by"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"results\": [\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\",\n      \"severity\": {\n        \"critical\": \"<number>\",\n        \"high\": \"<number>\",\n        \"medium\": \"<number>\",\n        \"low\": \"<number>\"\n      },\n      \"fixable\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      }\n    },\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\",\n      \"severity\": {\n        \"critical\": \"<number>\",\n        \"high\": \"<number>\",\n        \"medium\": \"<number>\",\n        \"low\": \"<number>\"\n      },\n      \"fixable\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      }\n    }\n  ]\n}"
												},
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/reporting/counts/issues/latest?groupBy=project,[severity|fixable]",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reporting",
																"counts",
																"issues",
																"latest"
															],
															"query": [
																{
																	"key": "groupBy",
																	"value": "project,[severity|fixable]",
																	"description": "The field to group results by"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"code\": \"<number>\",\n  \"ok\": \"<boolean>\",\n  \"error\": {\n    \"name\": \"<string>\",\n    \"innerErrors\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get issue counts",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_v1}}/reporting/counts/issues",
											"host": [
												"{{baseUrl_v1}}"
											],
											"path": [
												"reporting",
												"counts",
												"issues"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`",
													"disabled": true
												},
												{
													"key": "to",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`",
													"disabled": true
												},
												{
													"key": "groupBy",
													"value": "project,[severity|fixable]",
													"description": "The field to group results by",
													"disabled": true
												}
											]
										},
										"description": "Returns issue counts within a time frame. This data can take up to 9 hours to refresh\n#### Required permissions\n\n- `View Project` for every Organization in `filters.orgs`\n\n- `View Organization Reports` for every Organization in `filters.orgs`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/counts/issues?from=<string>&to=<string>&groupBy=project,[severity|fixable]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"counts",
														"issues"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
														},
														{
															"key": "to",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
														},
														{
															"key": "groupBy",
															"value": "project,[severity|fixable]",
															"description": "The field to group results by"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"results\": [\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\",\n      \"severity\": {\n        \"critical\": \"<number>\",\n        \"high\": \"<number>\",\n        \"medium\": \"<number>\",\n        \"low\": \"<number>\"\n      },\n      \"fixable\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      }\n    },\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\",\n      \"severity\": {\n        \"critical\": \"<number>\",\n        \"high\": \"<number>\",\n        \"medium\": \"<number>\",\n        \"low\": \"<number>\"\n      },\n      \"fixable\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      }\n    }\n  ]\n}"
										},
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"severity\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"types\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"ignored\": \"<boolean>\",\n    \"patched\": \"<boolean>\",\n    \"fixable\": \"<boolean>\",\n    \"isUpgradable\": \"<boolean>\",\n    \"isPatchable\": \"<boolean>\",\n    \"isPinnable\": \"<boolean>\",\n    \"priorityScore\": {\n      \"min\": \"<number>\",\n      \"max\": \"<number>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/counts/issues?from=<string>&to=<string>&groupBy=project,[severity|fixable]",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"counts",
														"issues"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
														},
														{
															"key": "to",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
														},
														{
															"key": "groupBy",
															"value": "project,[severity|fixable]",
															"description": "The field to group results by"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<number>\",\n  \"ok\": \"<boolean>\",\n  \"error\": {\n    \"name\": \"<string>\",\n    \"innerErrors\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "projects",
							"item": [
								{
									"name": "latest",
									"item": [
										{
											"name": "Get latest project counts",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/reporting/counts/projects/latest",
												"description": "Returns the number of projects currently in existence. This data can take up to 9 hours to refresh.\n\n+ Params#### Required permissions\n\n- `View Project` for every Organization in `filters.orgs`\n\n- `View Organization Reports` for every Organization in `filters.orgs`"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/reporting/counts/projects/latest"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"results\": [\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\"\n    },\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\"\n    }\n  ]\n}"
												},
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json; charset=utf-8"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/reporting/counts/projects/latest"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														}
													],
													"cookie": [],
													"body": "{\n  \"code\": \"<number>\",\n  \"ok\": \"<boolean>\",\n  \"error\": {\n    \"name\": \"<string>\",\n    \"innerErrors\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get project counts",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reporting/counts/projects?from=<string>&to=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reporting",
												"counts",
												"projects"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
												},
												{
													"key": "to",
													"value": "<string>",
													"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
												}
											]
										},
										"description": "Returns project counts within a time frame. This data can take up to 9 hours to refresh\n#### Required permissions\n\n- `View Project` for every Organization in `filters.orgs`\n\n- `View Organization Reports` for every Organization in `filters.orgs`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/counts/projects?from=<string>&to=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"counts",
														"projects"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
														},
														{
															"key": "to",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"results\": [\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\"\n    },\n    {\n      \"day\": \"<string>\",\n      \"count\": \"<number>\"\n    }\n  ]\n}"
										},
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"languages\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/counts/projects?from=<string>&to=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"counts",
														"projects"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results from, in the format `YYYY-MM-DD`"
														},
														{
															"key": "to",
															"value": "<string>",
															"description": "(Required) The date you wish to fetch results until, in the format `YYYY-MM-DD`"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<number>\",\n  \"ok\": \"<boolean>\",\n  \"error\": {\n    \"name\": \"<string>\",\n    \"innerErrors\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "tests",
							"item": [
								{
									"name": "Get test counts",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json; charset=utf-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"isPrivate\": \"<boolean>\",\n    \"issuesPrevented\": \"<boolean>\",\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reporting/counts/tests?from=<string>&to=<string>&groupBy=issuesPrevented",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reporting",
												"counts",
												"tests"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"description": "(Required) The date you wish to count tests from, in the format `YYYY-MM-DD`"
												},
												{
													"key": "to",
													"value": "<string>",
													"description": "(Required) The date you wish to count tests until, in the format `YYYY-MM-DD`"
												},
												{
													"key": "groupBy",
													"value": "issuesPrevented",
													"description": "The field to group results by"
												}
											]
										},
										"description": "Returns the number of tests conducted within a time frame. This data is updated in real time\n#### Required permissions\n\n- `View Project` for every Organization in `filters.orgs`\n\n- `View Organization Reports` for every Organization in `filters.orgs`"
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"isPrivate\": \"<boolean>\",\n    \"issuesPrevented\": \"<boolean>\",\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/counts/tests?from=<string>&to=<string>&groupBy=issuesPrevented",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"counts",
														"tests"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"description": "(Required) The date you wish to count tests from, in the format `YYYY-MM-DD`"
														},
														{
															"key": "to",
															"value": "<string>",
															"description": "(Required) The date you wish to count tests until, in the format `YYYY-MM-DD`"
														},
														{
															"key": "groupBy",
															"value": "issuesPrevented",
															"description": "The field to group results by"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"results\": [\n    {\n      \"count\": \"<number>\",\n      \"isPrivate\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      },\n      \"issuesPrevented\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      }\n    },\n    {\n      \"count\": \"<number>\",\n      \"isPrivate\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      },\n      \"issuesPrevented\": {\n        \"true\": \"<number>\",\n        \"false\": \"<number>\"\n      }\n    }\n  ]\n}"
										},
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json; charset=utf-8"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"filters\": {\n    \"orgs\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"isPrivate\": \"<boolean>\",\n    \"issuesPrevented\": \"<boolean>\",\n    \"projects\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reporting/counts/tests?from=<string>&to=<string>&groupBy=issuesPrevented",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reporting",
														"counts",
														"tests"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"description": "(Required) The date you wish to count tests from, in the format `YYYY-MM-DD`"
														},
														{
															"key": "to",
															"value": "<string>",
															"description": "(Required) The date you wish to count tests until, in the format `YYYY-MM-DD`"
														},
														{
															"key": "groupBy",
															"value": "issuesPrevented",
															"description": "The field to group results by"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<number>\",\n  \"ok\": \"<boolean>\",\n  \"error\": {\n    \"name\": \"<string>\",\n    \"innerErrors\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"value": "{{SNYK_TOKEN}}",
			"key": "Authorization"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.snyk.io/v1"
		}
	]
}